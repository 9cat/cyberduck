<!--
 *	Simple Ant (http://jakarta.apache.org/ant) build script for Cyberduck
 *
 *	$Revision: 6757 $
 *	$Date: 2010-08-25 13:25:44 +0200 (Mi, 25 Aug 2010) $
 *
 *  Copyright (c) 2005-2012 David Kocher. All rights reserved.
 *  http://cyberduck.ch/
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.package
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Bug fixes, suggestions and comments should be sent to:
 *	dkocher@cyberduck.ch
 -->

<project name="Cyberduck for Mac" basedir=".">

    <property name="build.deploy" location="${build}/${configuration}"/>

    <property name="app.bundle" value="${build.deploy}/${app.name}.app"/>
    <property name="app.contents" value="${app.bundle}/Contents"/>
    <property name="app.macos" location="${app.contents}/MacOS"/>
    <property name="app.executable" location="${app.macos}/${ant.project.name}"/>
    <property name="app.library" value="${app.contents}/Library"/>
    <property name="app.frameworks" value="${app.contents}/Frameworks"/>
    <property name="app.resources" value="${app.contents}/Resources"/>
    <property name="app.java" value="${app.resources}/Java"/>
    <property name="app.runtime" value="${app.java}/Runtime.jdk"/>
    <property name="app.runtime.lib"
              value="@executable_path/../Resources/Java/Runtime.jdk/Contents/Home/jre/lib/server/libjvm.dylib"/>
    <!--<property name="app.runtime.lib"-->
    <!--value="@executable_path/../Resources/Java/Runtime.jdk/Contents/Home/lib/server/libjvm.dylib"/>-->
    <property name="app.runtime.system.min" value="10.5"/>

    <property name="app.spotlight" value="${app.library}/Spotlight"/>
    <property name="app.spotlight.executable"
              value="${app.spotlight}/Cyberduck Spotlight Importer.mdimporter/Contents/MacOS/Cyberduck Spotlight Importer"/>

    <property name="apple.appstub"
              location="/System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub"/>

    <property name="jvm.runtime.home" value="${lib}/1.7.0.20.0-b06-internal.jdk"/>
    <!--<property name="jvm.runtime.home" value="${lib}/1.7.0.21.0-b17-b218.jdk"/>-->
    <property name="jvm.runtime.bundle.home" value="Contents/Home"/>
    <property name="jvm.runtime.bundle.lib" value="Contents/Home/jre/lib"/>
    <!--<property name="jvm.runtime.bundle.lib" value="Contents/Home/lib"/>-->

    <property name="codesign.certificate" value="Cyberduck Code Signing Certificate"/>
    <!--<property name="codesign.certificate" value="Developer ID Application: David Kocher"/>-->
    <property name="codesign.keychain" value="${user.home}/Library/Keychains/codesign.keychain"/>
    <property name="codesign.entitlements" value="${home}/sandbox.plist"/>
    <!-- Designated requirement -->
    <property name="codesign.requirement.source" value="${home}/codesign-requirement.txt"/>
    <property name="codesign.requirement" value="${home}/codesign-requirement.bin"/>
    <property name="codesign.arg" value="--requirements ${codesign.requirement}"/>
    <!--<property name="codesign.arg" value="- -entitlements ${codesign.entitlements}"/>-->

    <property name="installer.certificate" value="3rd Party Mac Developer Installer: David Kocher"/>
    <property name="installer.keychain" value="${user.home}/Library/Keychains/codesign.keychain"/>

    <property name="sparkle.feed" value="/dev/null"/>

    <property name="spotlight" value="${home}/Spotlight Importer"/>
    <property name="build.spotlight" value="${spotlight}/build/${configuration}"/>

    <property name="sdk.version" value="macosx10.7"/>

    <target name="spotlight">
        <exec dir="${spotlight}" executable="/usr/bin/xcrun" spawn="false" failonerror="true">
            <arg line="-sdk ${sdk.version} xcodebuild -project 'Spotlight Importer.xcodeproj' -configuration ${configuration}"/>
        </exec>
        <copy todir="${app.spotlight}">
            <fileset dir="${build.spotlight}">
                <include name="*.mdimporter/**"/>
            </fileset>
        </copy>
        <chmod perm="a+x" type="file">
            <fileset dir="${app.spotlight}">
                <include name="**/MacOS/*"/>
            </fileset>
        </chmod>
    </target>

    <target name="build" depends="archive" description="Compile, jar and copy to application bundle">
        <copy todir="${app.java}">
            <fileset dir="${build}">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy todir="${app.java}">
            <fileset dir="${lib}">
                <include name="*.jar"/>
                <include name="*.dylib"/>
            </fileset>
        </copy>
        <exec dir="${home}" executable="/usr/bin/xcrun" spawn="false" failonerror="true">
            <arg line="-sdk ${sdk.version} xcodebuild -project ${app.name}.xcodeproj -configuration ${configuration} -target app"/>
        </exec>
        <copy todir="${app.java}">
            <fileset dir="${build.deploy}">
                <include name="*.dylib"/>
            </fileset>
        </copy>

        <antcall target="copy-runtime"/>
        <antcall target="spotlight"/>

        <echo message="_VERSION_=${cyberduck.version.major}.${cyberduck.version.minor}"/>
        <echo message="_REVISION_=${svn.revision}"/>
        <echo message="_SPARKLEFEED_=${sparkle.feed}"/>
        <replace dir="${app.bundle}" summary="true" encoding="UTF-8">
            <include name="**/Info.plist"/>
            <replacefilter token="_REVISION_" value="${svn.revision}"/>
            <replacefilter token="_VERSION_" value="${cyberduck.version.major}.${cyberduck.version.minor}"/>
            <replacefilter token="_MINIMUM_SYSTEM_" value="${app.runtime.system.min}"/>
            <replacefilter token="_SPARKLEFEED_" value="${sparkle.feed}"/>
        </replace>
    </target>

    <target name="distribution-sparkle" depends="timestamp">
        <!-- Copy stub for system runtime -->
        <antcall target="copy-stub"/>
        <!-- Remove custom runtime -->
        <delete dir="${app.runtime}"/>

        <antcall target="codesign"/>
        <antcall target="tar"/>
        <antcall target="zip"/>
        <antcall target="sparkle-feed"/>
    </target>

    <target name="sparkle-feed">
        <copy todir="${build}" overwrite="true">
            <fileset dir="${www.update}">
                <include name="changelog.rss"/>
            </fileset>
        </copy>

        <echo message="_ARCHIVE_=${url.archive}"/>
        <echo message="_CHANGELOG_=${url.changelog}"/>

        <checksum file="${build}/${app.name}-${svn.revision}.tar.gz"
                  algorithm="md5" property="md5sum"/>
        <echo message="_MD5SUM_=${md5sum}"/>

        <echo message="Calculating DSA signature..."/>
        <exec dir="${home}" executable="sh" outputproperty="signature.dsa" failonerror="true">
            <arg value="-c"/>
            <arg value="openssl dgst -sha1 -binary '${build}/${app.name}-${svn.revision}.tar.gz' | openssl dgst -dss1 -sign ${www.update}/private.pem | openssl enc -base64"/>
        </exec>
        <property name="signature.dsa" value="${signature.dsa}"/>
        <echo message="_DSASIGNATURE_=${signature.dsa}"/>

        <replace dir="${build}" summary="true" encoding="UTF-8">
            <include name="changelog.rss"/>
            <replacefilter token="_TIMESTAMP_" value="${touch.time}"/>
            <replacefilter token="_ARCHIVE_" value="${url.archive}"/>
            <replacefilter token="_CHANGELOG_" value="${url.changelog}"/>
            <replacefilter token="_REVISION_" value="${svn.revision}"/>
            <replacefilter token="_VERSION_" value="${cyberduck.version.major}.${cyberduck.version.minor}"/>
            <replacefilter token="_DSASIGNATURE_" value="${signature.dsa}"/>
        </replace>
    </target>

    <target name="distribution-mas" depends="timestamp">
        <replace dir="${app.bundle}" summary="true" encoding="UTF-8">
            <include name="**/Info.plist"/>
            <replacefilter token="SU" value="None"/>
        </replace>
        <delete dir="${app.frameworks}/Sparkle.framework"/>

        <antcall target="strip"/>

        <antcall target="codesign">
            <!-- Enable sandbox environment with -entitlements ${codesign.entitlements} -->
            <param name="codesign.arg" value=""/>
            <param name="codesign.certificate" value="3rd Party Mac Developer Application: David Kocher"/>
        </antcall>

        <echo message="Building ${build}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.pkg"/>
        <property name="build.absolute" location="${build}"/>
        <exec dir="${build.deploy}" executable="/usr/bin/productbuild" spawn="false" failonerror="true">
            <arg line="--component ${app.bundle} /Applications --version ${cyberduck.version.major}.${cyberduck.version.minor} --sign '${installer.certificate}' --keychain ${installer.keychain} ${build.absolute}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.pkg"/>
        </exec>
        <checksum file="${build}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.pkg"
                  algorithm="md5"/>
    </target>

    <target name="strip">
        <antcall target="lipo">
            <!--Remove from executables-->
            <param name="arch" value="ppc7400"/>
            <param name="binary" value="**/MacOS/*"/>
        </antcall>
        <!--Remove from frameworks-->
        <antcall target="lipo">
            <param name="arch" value="ppc7400"/>
            <param name="binary" value="**/Current/*"/>
        </antcall>
        <antcall target="lipo">
            <param name="arch" value="ppc"/>
            <param name="binary" value="**/Current/*"/>
        </antcall>
        <antcall target="lipo">
            <param name="arch" value="ppc7400"/>
            <param name="binary" value="**/*.dylib"/>
        </antcall>
    </target>

    <target name="lipo">
        <echo message="Remove ${arch} slice from ${binary}"/>
        <apply executable="/usr/bin/lipo" failonerror="false" dest="${app.bundle}"
               parallel="false" spawn="false" force="true">
            <fileset dir="${app.bundle}">
                <include name="${binary}"/>
            </fileset>
            <arg line="-remove ${arch} -output"/>
            <srcfile/>
            <targetfile/>
            <identitymapper/>
        </apply>
    </target>

    <target name="install" depends="mas">
        <exec executable="/usr/bin/sudo" spawn="false" failonerror="true">
            <arg line="installer -store -pkg ${build}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.pkg -target /"/>
        </exec>
    </target>

    <target name="copy-runtime">
        <echo message="Copy runtime from ${jvm.runtime.home}..."/>
        <copy todir="${app.runtime}" preservelastmodified="true">
            <fileset followsymlinks="false" dir="${jvm.runtime.home}"/>
        </copy>
        <antcall target="shared-library-install-name">
            <param name="oldname" value="/System/Library/Frameworks/JavaVM.framework/Versions/A/JavaVM"/>
            <param name="newname" value="${app.runtime.lib}"/>
        </antcall>
    </target>

    <target name="shared-library-install-name">
        <echo message="Change dynamic shared library install names to ${newname}"/>
        <apply executable="/usr/bin/install_name_tool" failonerror="true"
               type="file"
               parallel="false" spawn="false" force="true">
            <arg line="-change ${oldname} ${newname}"/>
            <fileset dir="${app.java}">
                <include name="*.dylib"/>
            </fileset>
            <file file="${app.executable}"/>
            <srcfile/>
        </apply>
    </target>

    <target name="codesign" depends="unlock-keychain,compile-codesign-requirement">
        <echo message="Code signing ${app.java}/*.dylib with entitlements ${codesign.arg}..."/>
        <apply executable="/usr/bin/codesign" failonerror="true"
               type="file"
               parallel="false" spawn="false" force="true">
            <arg line="--force --sign '${codesign.certificate}' --keychain ${codesign.keychain} ${codesign.arg} -v"/>
            <fileset dir="${app.java}">
                <include name="*.dylib"/>
            </fileset>
            <srcfile/>
        </apply>
        <echo message="Code signing ${app.spotlight} with entitlements ${codesign.arg}..."/>
        <apply executable="/usr/bin/codesign" failonerror="true"
               type="dir"
               parallel="false" spawn="false" force="true">
            <arg line="--force --sign '${codesign.certificate}' --keychain ${codesign.keychain} ${codesign.arg} -v"/>
            <fileset dir="${app.spotlight}">
                <include name="*"/>
            </fileset>
            <srcfile/>
        </apply>
        <echo message="Code signing ${app.frameworks} with entitlements ${codesign.arg}..."/>
        <apply executable="/usr/bin/codesign" failonerror="true"
               type="dir"
               parallel="false" spawn="false" force="true">
            <arg line="--force --sign '${codesign.certificate}' --keychain ${codesign.keychain} ${codesign.arg} -v"/>
            <fileset dir="${app.frameworks}">
                <include name="*"/>
            </fileset>
            <srcfile/>
        </apply>
        <echo message="Code signing ${app.runtime} with entitlements ${codesign.arg}..."/>
        <apply executable="/usr/bin/codesign" failonerror="true"
               type="file"
               parallel="false" spawn="false" force="true">
            <arg line="--force --sign '${codesign.certificate}' --keychain ${codesign.keychain} ${codesign.arg} -v"/>
            <fileset dir="${app.runtime}" erroronmissingdir="false">
                <include name="**/*.dylib"/>
            </fileset>
            <srcfile/>
        </apply>
        <echo message="Code signing application bundle with entitlements ${codesign.arg}..."/>
        <exec executable="/usr/bin/codesign" spawn="false" failonerror="true">
            <arg line="--force --sign '${codesign.certificate}' --keychain ${codesign.keychain} ${codesign.arg} -v ${app.bundle}"/>
        </exec>
        <antcall target="verify-signature"/>
    </target>

    <target name="unlock-keychain">
        <exec executable="/usr/bin/security" failonerror="true">
            <arg line="unlock-keychain ${codesign.keychain}"/>
        </exec>
    </target>

    <target name="compile-codesign-requirement">
        <echo message="Compile codesign requirement ${codesign.requirement}..."/>
        <exec executable="/usr/bin/csreq" failonerror="true">
            <arg line="-r ${codesign.requirement.source} -b ${codesign.requirement}"/>
        </exec>
    </target>

    <target name="verify-signature">
        <echo message="Print codesign requirement for ${app.bundle}..."/>
        <exec executable="/usr/bin/codesign" failonerror="true">
            <arg line="-d -r- ${app.bundle}"/>
        </exec>
    </target>

    <target name="tar">
        <echo message="Creating tar.gz archive..."/>
        <exec dir="${build.deploy}" executable="tar" spawn="false" failonerror="true">
            <arg line="-czf ../${app.name}-${svn.revision}.tar.gz ${app.name}.app"/>
        </exec>
        <echo message="Calculating MD5 sum..."/>
        <checksum file="${build}/${app.name}-${svn.revision}.tar.gz"
                  algorithm="md5"/>
    </target>

    <target name="copy-stub">
        <antcall target="shared-library-install-name">
            <param name="newname" value="/System/Library/Frameworks/JavaVM.framework/Versions/A/JavaVM"/>
            <param name="oldname" value="${app.runtime.lib}"/>
        </antcall>
    </target>

    <target name="zip">
        <echo message="Creating ZIP archive..."/>
        <exec dir="${build.deploy}" executable="zip" spawn="false" failonerror="true">
            <arg line="-y -r ../${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.zip ${app.name}.app"/>
        </exec>
        <checksum file="${build}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.zip"
                  algorithm="md5"/>
    </target>

    <target name="nightly" depends="clean, revision">
        <antcall target="build">
            <param name="sparkle.feed" value="http://version.cyberduck.ch/nightly/changelog.rss"/>
        </antcall>
        <antcall target="distribution-sparkle">
            <param name="url.archive" value="http://update.cyberduck.ch/nightly/Cyberduck-_REVISION_.tar.gz"/>
            <param name="url.changelog" value="http://version.cyberduck.ch/nightly/changelog.html"/>
        </antcall>
        <echo message="_REVISION_=${svn.revision}"/>
        <scp file="${build}/${app.name}-${svn.revision}.tar.gz"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/nightly/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${build}/${app.name}-${svn.revision}.tar.gz.md5"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/nightly/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <!-- Changelog Nightly - version.cyberduck.ch -->
        <scp file="${build}/changelog.rss"
             todir="dkocher@version.cyberduck.ch:./version.cyberduck.ch/nightly/"
             keyfile="${user.home}/.ssh/version.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${www.update}/changelog.html"
             todir="dkocher@version.cyberduck.ch:./version.cyberduck.ch/nightly/"
             keyfile="${user.home}/.ssh/version.cyberduck.ch-rsa"
             passphrase="">
        </scp>
    </target>

    <target name="beta" depends="clean, revision">
        <antcall target="build">
            <param name="sparkle.feed" value="http://version.cyberduck.ch/beta/changelog.rss"/>
        </antcall>
        <antcall target="distribution-sparkle">
            <param name="url.archive" value="http://update.cyberduck.ch/beta/Cyberduck-_REVISION_.tar.gz"/>
            <param name="url.changelog" value="http://version.cyberduck.ch/beta/changelog.html"/>
        </antcall>
        <echo message="_REVISION_=${svn.revision}"/>
        <scp file="${build}/${app.name}-${svn.revision}.tar.gz"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/beta/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${build}/${app.name}-${svn.revision}.tar.gz.md5"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/beta/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <!-- Changelog Beta - version.cyberduck.ch -->
        <scp file="${build}/changelog.rss"
             todir="dkocher@version.cyberduck.ch:./version.cyberduck.ch/beta/"
             keyfile="${user.home}/.ssh/version.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${www.update}/changelog.html"
             todir="dkocher@version.cyberduck.ch:./version.cyberduck.ch/beta/"
             keyfile="${user.home}/.ssh/version.cyberduck.ch-rsa"
             passphrase="">
        </scp>
    </target>

    <target name="release" depends="clean, revision">
        <antcall target="build">
            <param name="sparkle.feed" value="http://version.cyberduck.ch/changelog.rss"/>
        </antcall>
        <antcall target="distribution-sparkle">
            <param name="url.archive" value="http://update.cyberduck.ch/Cyberduck-_REVISION_.tar.gz"/>
            <param name="url.changelog" value="http://version.cyberduck.ch/changelog.html"/>
        </antcall>
        <scp file="${build}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.zip"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${build}/${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}.zip.md5"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${build}/${app.name}-${svn.revision}.tar.gz"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${build}/${app.name}-${svn.revision}.tar.gz.md5"
             todir="dkocher@update.cyberduck.ch:./update.cyberduck.ch/"
             keyfile="${user.home}/.ssh/update.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <!-- Changelog Release - version.cyberduck.ch -->
        <scp file="${build}/changelog.rss"
             todir="dkocher@version.cyberduck.ch:./version.cyberduck.ch/"
             keyfile="${user.home}/.ssh/version.cyberduck.ch-rsa"
             passphrase="">
        </scp>
        <scp file="${www.update}/changelog.html"
             todir="dkocher@version.cyberduck.ch:./version.cyberduck.ch/"
             keyfile="${user.home}/.ssh/version.cyberduck.ch-rsa"
             passphrase="">
        </scp>
    </target>

    <target name="mas" depends="clean, revision">
        <antcall target="build">
            <param name="app.runtime.system.min" value="10.6.6"/>
        </antcall>
        <antcall target="distribution-mas"/>
    </target>
</project>
