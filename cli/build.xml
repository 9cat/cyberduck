<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	$Revision$
 *	$Date$
 *
 *  Copyright (c) 2005-2012 David Kocher. All rights reserved.
 *  http://cyberduck.io/
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Bug fixes, suggestions and comments should be sent to:
 *	dkocher@cyberduck.io
 -->
<project name="Cyberduck CLI" basedir="."
         xmlns:fx="javafx:com.sun.javafx.tools.ant">

    <import file="../build.xml"/>

    <property name="app.name" value="${ant.project.name}"/>

    <property name="jvm.runtime.bin" value="${java.home}/bin"/>

    <property name="cli.bundle" value="${build}/duck.bundle"/>
    <property name="app.icon" value="${home}/cyberduck-application.png"/>
    <property name="rpm.spec" value="${build.bundles}/package/linux"/>
    <property name="deb.control" value="${build.bundles}/package/linux/control"/>
    <property name="deb.postinstall" value="${build.bundles}/package/linux/postinst"/>
    <property name="deb.postrm" value="${build.bundles}/package/linux/postrm"/>

    <property name="msbuild.configuration" value="release"/>
    <property name="msbuild.architecture" value="x86"/>

    <property name="xcode.configuration" value="Release"/>
    <property name="xcode.target" value="cli"/>

    <import file="../runtime.xml"/>
    <import file="../codesign.xml"/>
    <import file="../archive.xml"/>

    <target name="build" depends="version,windows,fx,osx"/>

    <target name="windows" if="${platform.windows}">
        <taskdef name="msbuild" classname="org.apache.ant.dotnet.build.MSBuildTask">
            <classpath path="${lib.ext}/ant-dotnet-1.1.jar"/>
        </taskdef>
        <msbuild buildfile="../CLI-WiX-Bootstrapper.wixproj">
            <target name="Clean"/>
            <target name="Build"/>

            <property name="Version" value="${normalized.version}.${revision}"/>
            <property name="ShortVersion" value="${normalized.version} (${revision})"/>
            <property name="Configuration" value="${msbuild.configuration}"/>
            <property name="Platform" value="${msbuild.architecture}"/>
        </msbuild>
        <checksum file="${build.deploy}/duck-${normalized.version}.exe" algorithm="md5"/>

        <copy todir="${chocolatey.target}">
            <fileset dir="${chocolatey.source}">
                <include name="*/**"/>
            </fileset>
        </copy>
        <replace dir="${chocolatey.target}" summary="true" encoding="UTF-8">
            <include name="*.nuspec"/>
            <include name="tools/*.ps1"/>
            <replacefilter token="${VERSION}" value="${version}"/>
            <replacefilter token="${REVISION}" value="${revision}"/>
        </replace>
        <exec executable="${cpack.bin}" dir="${chocolatey.target}" failonerror="true"/>
    </target>

    <target name="fx" if="${platform.linux}">
        <copy file="${setup}/rpm/duck.spec" todir="${rpm.spec}"/>
        <copy file="${setup}/deb/duck.control" tofile="${deb.control}"/>
        <copy file="${setup}/deb/duck.postinstall" tofile="${deb.postinstall}"/>
        <copy file="${setup}/deb/duck.postrm" tofile="${deb.postrm}"/>
        <replace file="${rpm.spec}/duck.spec" summary="true" encoding="UTF-8">
            <replacefilter token="${VERSION}" value="${version}"/>
            <replacefilter token="${REVISION}" value="${revision}"/>
        </replace>
        <path id="javafx.classpath">
            <!-- Includes linuxrpmbuilder for given architecture -->
            <pathelement path="${lib.ext}/ant-javafx.${sun.arch.data.model}.jar"/>
            <pathelement path="${build.bundles}"/>
        </path>
        <copy todir="${build}">
            <fileset dir="${lib}">
                <!-- Include libjnidispatch.so -->
                <include name="*.${sun.arch.data.model}.so"/>
            </fileset>
            <mapper type="glob" from="*.${sun.arch.data.model}.so" to="*.so"/>
        </copy>
        <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
                 uri="javafx:com.sun.javafx.tools.ant">
            <classpath refid="javafx.classpath"/>
        </taskdef>
        <echo message="Create native bundles with classpath ${toString:javafx.classpath}"/>
        <fx:deploy nativeBundles="all"
                   outdir="${build.deploy}"
                   outfile="${app.name}-${version}"
                   offlineAllowed="true"
                   verbose="true">
            <fx:preferences shortcut="false" menu="false"
                            install="true"/>
            <fx:platform basedir="${java.home}">
                <fx:jvmarg value="-Djna.nounpack=true"/>
                <fx:jvmarg value="-Djna.noclasspath=true"/>
                <fx:jvmarg value="-Djava.awt.headless=true"/>
                <fx:jvmarg value="-Dsun.jnu.encoding=utf-8"/>
                <fx:jvmarg value="-Dfile.encoding=utf-8"/>
                <fx:jvmarg value="-Djava.security.egd=file:/dev/./urandom"/>
                <fx:jvmarg value="-Djava.net.useSystemProxies=true"/>
            </fx:platform>
            <fx:application
                    name="duck" version="${version}.${revision}"
                    mainClass="ch.cyberduck.cli.Terminal"/>
            <fx:info title="${app.name}" license="GPL" copyright="${copyright}"
                     description="${app.name}"
                     vendor="cyberduck.io">
                <fx:icon href="${app.icon}"/>
            </fx:info>
            <fx:resources>
                <fx:fileset dir="${build}" type="jar">
                    <include name="*.jar"/>
                </fx:fileset>
                <fx:fileset dir="${build}" type="data">
                    <include name="*.so"/>
                    <include name="*.dylib"/>
                    <include name="*.dll"/>
                </fx:fileset>
                <fx:fileset dir="${home}" type="icon">
                    <include name="*.ico"/>
                </fx:fileset>
                <fx:fileset type="license" file="${home}/LICENSE.txt"/>
                <fx:fileset dir="${home}" type="data">
                    <include name="profiles/Rackspace US.cyberduckprofile"/>
                </fx:fileset>
                <!-- Localizations -->
                <fx:fileset dir="${home}" type="data">
                    <include name="*.lproj/*.strings"/>
                </fx:fileset>
            </fx:resources>
        </fx:deploy>
    </target>

    <target name="osx" if="${platform.mac}" depends="tarball">
        <echo message="Building ${cli.bundle}"/>
        <property name="build.settings"
                  value="MACOSX_DEPLOYMENT_TARGET=${app.runtime.system.min} VERSION=${version} REVISION=${revision} COPYRIGHT='${copyright}'"/>
        <exec dir="${home}" executable="/usr/bin/xcrun" spawn="false" failonerror="true">
            <arg line="xcodebuild -project ${home}/'Cyberduck.xcodeproj' -configuration '${xcode.configuration}' -target '${xcode.target}' ${build.settings}"/>
        </exec>
        <!-- Copy runtime -->
        <antcall target="runtime">
            <param name="bundle" value="${cli.bundle}"/>
        </antcall>
        <antcall target="codesign">
            <param name="bundle" value="${cli.bundle}"/>
            <param name="codesign.options" value="--force"/>
        </antcall>
        <antcall target="tar">
            <param name="directory" value="${build}"/>
            <param name="source" value="duck.bundle"/>
            <param name="target" value="duck-${version}.${revision}.tar.gz"/>
        </antcall>
        <checksum file="${build.deploy}/duck-${version}.${revision}.tar.gz"
                  algorithm="sha1" property="archive.sha1"/>
        <copy todir="${build.deploy}" overwrite="true">
            <fileset dir="${setup}/brew">
                <include name="*.rb"/>
            </fileset>
        </copy>
        <replace dir="${build.deploy}" summary="true" encoding="UTF-8">
            <include name="*.rb"/>
            <replacefilter token="${REVISION}" value="${revision}"/>
            <replacefilter token="${VERSION}" value="${version}"/>
            <replacefilter token="${ARCHIVE.SHA1}" value="${archive.sha1}"/>
            <replacefilter token="${ARCHIVE}"
                           value="https://dist.duck.sh/duck-${version}.${revision}.tar.gz"/>
            <replacefilter token="${SOURCE.SHA256}" value="${source.sha256}"/>
            <replacefilter token="${SOURCE}"
                           value="https://dist.duck.sh/duck-src-${version}.${revision}.tar.gz"/>
        </replace>
        <exec dir="${build.deploy}" executable="/usr/bin/pkgbuild" spawn="false" failonerror="true">
            <arg line="--component ${cli.bundle} --install-location /usr/local --version ${version} --scripts ${setup}/pkg --sign '${installer.certificate}' --keychain ${codesign.keychain} ${build.deploy}/duck-${version}.${revision}.pkg"/>
        </exec>
        <checksum file="${build.deploy}/duck-${version}.${revision}.pkg" algorithm="md5"/>
        <exec executable="/usr/sbin/pkgutil" failonerror="true">
            <arg line="--check-signature ${build.deploy}/duck-${version}.${revision}.pkg"/>
        </exec>
    </target>
</project>
