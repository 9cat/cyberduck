<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	Simple Ant (http://jakarta.apache.org/ant) build script for Cyberduck
 *
 *	$Revision$
 *	$Date$
 *
 *  Copyright (c) 2005-2012 David Kocher. All rights reserved.
 *  http://cyberduck.io/
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.F
 *
 *	Bug fixes, suggestions and comments should be sent to:
 *	dkocher@cyberduck.io
 -->
<project name="Cyberduck" default="build" basedir=".">

    <property file="build.properties"/>
    <property file="tools.properties"/>

    <property environment="env"/>

    <property name="app.name" value="${ant.project.name}"/>

    <property name="debug" value="on"/>
    <property name="home" location="."/>
    <property name="unittests" value="${home}/test"/>
    <property name="build" value="${home}/build"/>
    <property name="build.compile.target" value="1.7"/>
    <property name="configuration" value="release"/>
    <property name="build.deploy" location="${build}/${configuration}"/>
    <property name="build.bundles" value="${build.deploy}/bundles"/>
    <property name="build.classes" value="${build}/classes"/>
    <property name="build.unittests" value="${build}/test-classes"/>
    <property name="build.unittests.reports" value="${build}/report"/>
    <property name="config" value="${home}/config"/>
    <property name="img" value="${home}/img"/>
    <property name="lib" value="${home}/lib"/>
    <property name="lib.ext" value="${lib}/ext"/>
    <property name="source" value="${home}/source"/>
    <property name="resources" value="${home}/resources"/>
    <property name="doc" value="${home}/doc"/>
    <property name="www" value="${home}/www"/>
    <property name="www.update" value="${www}/update"/>
    <property name="www.help" value="${www}/help"/>
    <property name="setup" value="${home}/setup"/>
    <property name="copyright" value="Copyright (c) 2001-2015 David Kocher"/>
    <property name="version" value="${cyberduck.version.major}.${cyberduck.version.minor}"/>

    <!-- Used for tests -->
    <property name="jvm.runtime.home" value="${java.home}"/>
    <property name="sonar.host" value="sonar.cyberduck.io"/>

    <condition property="platform" value="mac">
        <os family="mac"/>
    </condition>
    <condition property="platform" value="windows">
        <os family="windows"/>
    </condition>
    <condition property="platform" value="linux">
        <os family="unix"/>
    </condition>

    <import description="Platform specific targets" file="build-${platform}.xml"/>

    <path id="test.classpath">
        <path refid="build.classpath"/>
        <pathelement location="${build.unittests}"/>
        <pathelement location="${build}"/>
        <fileset dir="${build}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.ext}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="build.classpath">
        <!-- Include all libraries -->
        <fileset dir="${lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="init">
        <echo message=""/>
        <echo message="	  ---------------------------------------------------------------"/>
        <echo message="   Java Version: ${ant.java.version}"/>
        <echo message="	  Project Home:		${home}"/>
        <echo message="	  Project Build:	${build}"/>
        <echo message="	  Project Source:	${source}"/>
        <echo message="	  ---------------------------------------------------------------"/>
        <echo message=""/>
        <echo message="Building ${app.name}..."/>

        <mkdir dir="${build}"/>
        <mkdir dir="${build.deploy}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.unittests}"/>
        <mkdir dir="${build.unittests.reports}"/>
        <mkdir dir="${build.unittests.reports}/html"/>
    </target>

    <target name="build" description="Build GUI application"
            depends="archive, _build"/>

    <target name="cli" description="Build CLI application"
            depends="archive, _cli"/>

    <target name="timestamp">
        <tstamp>
            <format property="touch.time"
                    pattern="dd/MM/yyyy hh:mm aa"
                    timezone="GMT+1"
                    locale="en"/>
        </tstamp>
    </target>

    <target name="revision">
        <echo message="Calculating revision..."/>
        <exec dir="${home}" executable="svnversion" outputproperty="svn.revision" failonerror="true">
            <arg value="."/>
        </exec>
        <property name="svn.revision" value="${svn.revision}"/>
        <echo message="svn.revision=${svn.revision}"/>
        <buildnumber file="build.number"/>
        <echo message="Build number ${build.number}"/>
    </target>

    <target name="compile" depends="init" description="Compile the source tree">
        <javac fork="true"
               includeantruntime="false"
               debug="${debug}"
               encoding="utf-8"
               srcdir="${source}"
               target="${build.compile.target}"
               source="${build.compile.target}"
               deprecation="on"
               listfiles="on"
               extdirs=""
               destdir="${build.classes}">
            <classpath refid="build.classpath"/>
        </javac>
    </target>

    <target name="archive" depends="compile, manifest" description="Create archives">
        <jar jarfile="${build}/config.jar"
             update="yes"
             manifest="${build}/MANIFEST.MF">
            <fileset dir="${lib}">
                <include name="mime.types"/>
                <include name="log4j-*.xml"/>
            </fileset>
        </jar>
        <jar jarfile="${build}/core.jar"
             update="yes"
             manifest="${build}/MANIFEST.MF">
            <fileset dir="${build.classes}">
                <include name="ch/cyberduck/core/**/*.class"/>
            </fileset>
        </jar>
        <jar jarfile="${build}/ui.jar"
             update="yes"
             manifest="${build}/MANIFEST.MF">
            <fileset dir="${build.classes}/">
                <include name="ch/cyberduck/ui/**/*.class"/>
                <exclude name="ch/cyberduck/ui/cocoa/**/*.class"/>
            </fileset>
        </jar>
        <jar jarfile="${build}/cocoa.jar"
             update="yes"
             manifest="${build}/MANIFEST.MF">
            <fileset dir="${build.classes}/">
                <include name="ch/cyberduck/ui/cocoa/**/*.class"/>
            </fileset>
        </jar>

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath path="${lib.ext}/ant-contrib-1.0b3.jar"/>
        </taskdef>
        <var name="manifest.lib.classpath" unset="true"/>
        <manifestclasspath property="manifest.lib.classpath"
                           jarfile="${lib}/cli.jar">
            <!-- Convert paths relative to target jarfile -->
            <classpath refid="build.classpath"/>
        </manifestclasspath>
        <var name="manifest.build.classpath" unset="true"/>
        <manifestclasspath property="manifest.build.classpath"
                           jarfile="${build}/cli.jar">
            <!-- Convert paths relative to target jarfile -->
            <classpath>
                <fileset dir="${build}" includes="*.jar"/>
            </classpath>
        </manifestclasspath>
        <jar jarfile="${build}/cli.jar"
             update="yes">
            <fileset dir="${build.classes}">
                <include name="ch/cyberduck/cli/*.class"/>
            </fileset>
            <manifest>
                <attribute name="Specification-Title" value="${app.name}"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="${copyright}"/>
                <attribute name="Implementation-Version" value="${svn.revision}"/>
                <attribute name="Main-Class" value="ch.cyberduck.cli.Terminal"/>
                <attribute name="Class-Path" value="${manifest.lib.classpath} ${manifest.build.classpath}"/>
            </manifest>
        </jar>
    </target>

    <target name="doc" depends="init" description="Generate Javadoc">
        <mkdir dir="${doc}"/>
        <javadoc packagenames="ch.cyberduck.*,com.*,org.*"
                 sourcepath="${source}"
                 destdir="${doc}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="${app.name} API"
                 doctitle="${app.name}"
                 bottom="${copyright}">
            <classpath refid="build.classpath"/>
        </javadoc>
    </target>

    <target name="clean" description="Delete compiled classes, jar files, jni libraries and application bundle">
        <delete dir="${build}"/>
    </target>

    <target name="manifest" depends="revision" description="Create manifest file">
        <manifest file="${build}/MANIFEST.MF">
            <attribute name="Specification-Title" value="${app.name}"/>
            <attribute name="Specification-Version" value="${version}"/>
            <attribute name="Specification-Vendor" value="${copyright}"/>
            <attribute name="Implementation-Version" value="${svn.revision}"/>
        </manifest>
    </target>

    <target name="test-compile" depends="build">
        <javac debug="${debug}"
               includeantruntime="false"
               encoding="utf-8"
               target="${build.compile.target}"
               source="${build.compile.target}"
               deprecation="off"
               srcdir="${unittests}"
               destdir="${build.unittests}"
               includes="**/*.java">
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <target name="test" depends="test-compile" description="Runs all tests">
        <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
            <classpath path="${lib.ext}/junit-4.11.jar"/>
            <classpath path="${lib.ext}/hamcrest-core-1.3.jar"/>
        </taskdef>
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
            <classpath path="${lib.ext}/jacocoant.jar"/>
        </taskdef>
        <copy todir="${build}">
            <fileset dir="${lib}">
                <!-- Include libjnidispatch.dylib -->
                <include name="*.dylib"/>
            </fileset>
        </copy>
        <jacoco:coverage destfile="${build}/jacoco.exec" xmlns:jacoco="antlib:org.jacoco.ant">
            <junit jvm="${jvm.runtime.home}/bin/java" fork="yes" forkmode="once"
                   printsummary="on" filtertrace="on"
                   haltonfailure="no" failureproperty="test.failed"
                   showoutput="yes"
                   dir="${home}">
                <classpath refid="test.classpath"/>
                <formatter type="plain" usefile="false"/>
                <formatter type="xml" extension=".xml" usefile="true"/>
                <batchtest todir="${build.unittests.reports}">
                    <fileset dir="${build.unittests}">
                        <include name="**/*Test.class"/>
                    </fileset>
                </batchtest>
                <sysproperty key="java.library.path" value="${build}"/>
                <sysproperty key="jna.library.path" value="${build}"/>
                <sysproperty key="s3.key" value="${s3.key}"/>
                <sysproperty key="s3.secret" value="${s3.secret}"/>
                <sysproperty key="rackspace.key" value="${rackspace.key}"/>
                <sysproperty key="rackspace.secret" value="${rackspace.secret}"/>
                <sysproperty key="hpcloud.key" value="${hpcloud.key}"/>
                <sysproperty key="hpcloud.secret" value="${hpcloud.secret}"/>
                <sysproperty key="hpcloud.user" value="${hpcloud.user}"/>
                <sysproperty key="hpcloud.password" value="${hpcloud.password}"/>
                <sysproperty key="webdav.user" value="${webdav.user}"/>
                <sysproperty key="webdav.password" value="${webdav.password}"/>
                <sysproperty key="ftp.user" value="${ftp.user}"/>
                <sysproperty key="ftp.password" value="${ftp.password}"/>
                <sysproperty key="sftp.user" value="${sftp.user}"/>
                <sysproperty key="sftp.password" value="${sftp.password}"/>
                <sysproperty key="sftp.key" value="${sftp.key}"/>
                <sysproperty key="sftp.key.openssh.rsa" value="${sftp.key.openssh.rsa}"/>
                <sysproperty key="sftp.key.openssh.ecdsa" value="${sftp.key.openssh.ecdsa}"/>
                <sysproperty key="sftp.key.putty" value="${sftp.key.putty}"/>
                <sysproperty key="google.projectid" value="${google.projectid}"/>
                <sysproperty key="google.accesstoken" value="${google.accesstoken}"/>
                <sysproperty key="google.refreshtoken" value="${google.refreshtoken}"/>
                <sysproperty key="azure.account" value="${azure.account}"/>
                <sysproperty key="azure.key" value="${azure.key}"/>
                <sysproperty key="oraclecloud.key" value="${oraclecloud.key}"/>
                <sysproperty key="oraclecloud.secret" value="${oraclecloud.secret}"/>
                <sysproperty key="evault.s3.key" value="${evault.s3.key}"/>
                <sysproperty key="evault.s3.secret" value="${evault.s3.secret}"/>
                <sysproperty key="evault.openstack.key" value="${evault.openstack.key}"/>
                <sysproperty key="evault.openstack.secret" value="${evault.openstack.secret}"/>
            </junit>
        </jacoco:coverage>
        <junitreport todir="${build.unittests.reports}/html">
            <fileset dir="${build.unittests.reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.unittests.reports}/html"/>
        </junitreport>
        <!--<fail message="Test failure detected" if="test.failed"/>-->
    </target>

    <target name="sonar" depends="test" description="Run Sonar">
        <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
            <classpath path="${lib.ext}/sonar-ant-task-2.1.jar"/>
        </taskdef>
        <property name="sonar.projectName" value="${app.name}"/>
        <property name="sonar.projectKey" value="ch.cyberduck:cyberduck-${platform}"/>
        <property name="sonar.projectVersion" value="${svn.revision}"/>
        <property name="sonar.sources" value="${source}"/>
        <property name="sonar.tests" value="${unittests}"/>
        <property name="sonar.binaries" value="${build.classes}"/>
        <property name="sonar.junit.reportsPath" value="${build.unittests.reports}"/>
        <pathconvert property="sonar.libraries" refid="build.classpath" pathsep=","/>
        <property name="sonar.host.url" value="https://${sonar.host}"/>
        <property name="sonar.jdbc.url"
                  value="jdbc:mysql://${sonar.host}:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"/>
        <property name="sonar.jdbc.username" value="sonar"/>
        <property name="sonar.jdbc.password" value="sonar"/>
        <property name="sonar.jdbc.driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="sonar.dynamicAnalysis" value="reuseReports"/>
        <property name="sonar.core.codeCoveragePlugin" value="jacoco"/>
        <property name="sonar.jacoco.reportPath" value="${build}/jacoco.exec"/>
        <property name="sonar.jacoco.antTargets" value="test"/>
        <property name="sonar.links.homepage" value="http://cyberduck.io"/>
        <property name="sonar.links.ci" value="https://ci.cyberduck.io"/>
        <property name="sonar.links.issue" value="https://trac.cyberduck.io"/>
        <property name="sonar.scm.url" value="scm:svn:http://svn.cyberduck.io/trunk"/>
        <property name="sonar.links.scm" value="https://svn.cyberduck.io"/>
        <property name="sonar.links.scm_dev" value="https://svn.cyberduck.io"/>
        <sonar:sonar xmlns:sonar="antlib:org.sonar.ant"/>
    </target>
</project>
