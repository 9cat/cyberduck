/*
 * Secure Data Space API
 * Version 4.2.0.beta2 - built at: 2017-06-02 17:44:30, API server: https://duck.ssp-europe.eu/api/v4
 *
 * OpenAPI spec version: 4.2.0.beta2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.sds.io.swagger.client.api;

import ch.cyberduck.core.sds.io.swagger.client.ApiException;
import ch.cyberduck.core.sds.io.swagger.client.model.*;

import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

/**
 * API tests for SystemconfigApi
 */
@Ignore
public class SystemconfigApiTest {

    private final SystemconfigApi api = new SystemconfigApi();


    /**
     * Create Radius Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String xSdsAuthToken = null;
        RadiusConfigCreateRequest body = null;
        RadiusConfig response = api.create(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Create active directory configuration
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Create a new AD configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; New AD configuration created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAdConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        CreateActiveDirectoryConfigRequest body = null;
        String xSdsDateFormat = null;
        ActiveDirectoryConfig response = api.createAdConfig(xSdsAuthToken, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Create OAuth client
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Create a new OAuth client.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; New OAuth client created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; &lt;br/&gt; Standard Access Token validity: 8 hours &lt;br/&gt; Standard Refresh Token validity: 30 days &lt;br/&gt;Valid grant types are: authorization_code, implicit, password, client_credentials, refresh_token &lt;br/&gt; grant type &#39;client_credentials&#39; is actually not permitted!&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOAuthClientTest() throws ApiException {
        String xSdsAuthToken = null;
        CreateOAuthClientRequest body = null;
        OAuthClient response = api.createOAuthClient(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Create OpenID IDP configuration
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Create a new OpenID Connect IDP configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; New OpenID Connect IDP configuration is created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; See &lt;a href&#x3D;\&quot;http://openid.net/developers/specs\&quot;&gt;http://openid.net/developers/specs&lt;/a&gt; for further information.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOpenIdIdpConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        CreateOpenIdIdpConfigRequest body = null;
        OpenIdIdpConfig response = api.createOpenIdIdpConfig(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Delete active directory settings
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Delete an existing AD configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; AD configuration removed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAdConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer adId = null;
        api.deleteAdConfig(xSdsAuthToken, adId);

        // TODO: test validations
    }

    /**
     * Delete OAuth client
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Delete an existing OAuth client.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; OAuth client removed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuthClientTest() throws ApiException {
        String xSdsAuthToken = null;
        String clientId = null;
        api.deleteOAuthClient(xSdsAuthToken, clientId);

        // TODO: test validations
    }

    /**
     * Delete OpenID IDP configuration
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Delete an existing OpenID Connect IDP configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; OpenID Connect IDP configuration removed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOpenIdIdpConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer idpId = null;
        api.deleteOpenIdIdpConfig(xSdsAuthToken, idpId);

        // TODO: test validations
    }

    /**
     * Detete Radius Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deteteRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        api.deteteRadiusConfig(xSdsAuthToken);

        // TODO: test validations
    }

    /**
     * Get active directory settings
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Retrieve a list of configured ADs.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdConfigsTest() throws ApiException {
        String xSdsAuthToken = null;
        String xSdsDateFormat = null;
        ActiveDirectoryConfigList response = api.getAdConfigs(xSdsAuthToken, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Get active directory setting
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Retrieve the configuration of a AD.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthAdSettingTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer adId = null;
        String xSdsDateFormat = null;
        ActiveDirectoryConfig response = api.getAuthAdSetting(xSdsAuthToken, adId, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Get OAuth client
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt;Retrieve the configuration of an OAuth client.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOAuthClientTest() throws ApiException {
        String xSdsAuthToken = null;
        String clientId = null;
        OAuthClient response = api.getOAuthClient(xSdsAuthToken, clientId);

        // TODO: test validations
    }

    /**
     * Get OAuth clients
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Retrieve a list of configured OAuth clients.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOAuthClientsTest() throws ApiException {
        String xSdsAuthToken = null;
        List<OAuthClient> response = api.getOAuthClients(xSdsAuthToken);

        // TODO: test validations
    }

    /**
     * Get OpenID IDP configuration
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Retrieve an OpenID Connect IDP configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOpenIdIdpConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer idpId = null;
        OpenIdIdpConfig response = api.getOpenIdIdpConfig(xSdsAuthToken, idpId);

        // TODO: test validations
    }

    /**
     * Get OpenID IDP configurations
     * <p>
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt; &lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Retrieve a list of configured OpenID Connect IDPs.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpenIdIdpConfigsTest() throws ApiException {
        String xSdsAuthToken = null;
        List<OpenIdIdpConfig> response = api.getOpenIdIdpConfigs(xSdsAuthToken);

        // TODO: test validations
    }

    /**
     * Get Radius Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        RadiusConfig response = api.getRadiusConfig(xSdsAuthToken);

        // TODO: test validations
    }

    /**
     * Test active directory configuration
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Test AD configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; SDS tries to establish a connection with the provided information.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testAdConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        TestActiveDirectoryConfigRequest body = null;
        TestActiveDirectoryConfigResponse response = api.testAdConfig(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Test radius server availability
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        api.testRadiusConfig(xSdsAuthToken);

        // TODO: test validations
    }

    /**
     * Update active directory settings
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Update an existing AD configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; AD configuration updated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAuthAdSettingTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer adId = null;
        UpdateActiveDirectoryConfigRequest body = null;
        String xSdsDateFormat = null;
        ActiveDirectoryConfig response = api.updateAuthAdSetting(xSdsAuthToken, adId, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Update OAuth client
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Update an existing OAuth client.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; OAuth client updated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Valid grant types are: authorization_code, implicit, password, client_credentials, refresh_token &lt;br/&gt; grant type &#39;client_credentials&#39; is actually not permitted!&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOAuthClientTest() throws ApiException {
        String xSdsAuthToken = null;
        String clientId = null;
        UpdateOAuthClientRequest body = null;
        OAuthClient response = api.updateOAuthClient(xSdsAuthToken, clientId, body);

        // TODO: test validations
    }

    /**
     * Update OpenID IDP configuration
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt; Update an existing OpenID Connect IDP configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Data Space Admin of the Provider Customer on SDS Dedicated or SDS for Linux/Windows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; OpenID Connect IDP configuration is updated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; See &lt;a href&#x3D;\&quot;http://openid.net/developers/specs\&quot;&gt;http://openid.net/developers/specs&lt;/a&gt; for further information.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOpenIdIdpConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer idpId = null;
        UpdateOpenIdIdpConfigRequest body = null;
        OpenIdIdpConfig response = api.updateOpenIdIdpConfig(xSdsAuthToken, idpId, body);

        // TODO: test validations
    }

    /**
     * Update Radius Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        RadiusConfigUpdateRequest body = null;
        RadiusConfig response = api.updateRadiusConfig(xSdsAuthToken, body);

        // TODO: test validations
    }

}
