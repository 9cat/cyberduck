/*
 * Secure Data Space API
 * Version 4.1.2 - built at: 2017-03-02 18:50:25, API server: https://sds.ssp-europe.eu/api/v4
 *
 * OpenAPI spec version: 4.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.sds.io.swagger.client.api;

import ch.cyberduck.core.sds.io.swagger.client.ApiException;
import ch.cyberduck.core.sds.io.swagger.client.model.Customer;
import ch.cyberduck.core.sds.io.swagger.client.model.CustomerList;
import ch.cyberduck.core.sds.io.swagger.client.model.NewCustomerRequest;
import ch.cyberduck.core.sds.io.swagger.client.model.NewCustomerResponse;
import ch.cyberduck.core.sds.io.swagger.client.model.UpdateCustomerRequest;
import ch.cyberduck.core.sds.io.swagger.client.model.UpdateCustomerResponse;
import ch.cyberduck.core.sds.io.swagger.client.model.UserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProvisioningApi
 */
@Ignore
public class ProvisioningApiTest {

    private final ProvisioningApi api = new ProvisioningApi();

    
    /**
     * Delete customer
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt;Delete a customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Customer is deleted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Authentication with &lt;b&gt;X-Sds-Service-Token&lt;/b&gt; required.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerTest() throws ApiException {
        String xSdsServiceToken = null;
        Long customerId = null;
        api.deleteCustomer(xSdsServiceToken, customerId);

        // TODO: test validations
    }
    
    /**
     * Get customer
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt;Receive details of a selected customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Existing customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; none.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Authentication with &lt;b&gt;X-Sds-Service-Token&lt;/b&gt; required.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerTest() throws ApiException {
        String xSdsServiceToken = null;
        Long customerId = null;
        String xSdsDateFormat = null;
        Customer response = api.getCustomer(xSdsServiceToken, customerId, xSdsDateFormat);

        // TODO: test validations
    }
    
    /**
     * Get customer users
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt; Receive a list of users associated with a certain customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Authentication with &lt;b&gt;X-Sds-Service-Token&lt;/b&gt; required.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;OPERATOR&amp;gt;:&amp;lt;VALUE&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Multiple fields are supported.&lt;/p&gt;&lt;h5&gt;Filter fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;login&lt;/dt&gt;&lt;dd&gt;Login name&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (User login name contains value)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;firstName&lt;/dt&gt;&lt;dd&gt;First name&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (User first name contains value)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;lastName&lt;/dt&gt;&lt;dd&gt;Last name&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (User last name contains value)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;lockStatus&lt;/dt&gt;&lt;dd&gt;Lock status: 0 - Locked, 1 - Web access allowed, 2 - Web and mobile access allowed,&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (User lock status)&lt;br/&gt;VALUE: [0|1|2].&lt;/dd&gt;&lt;dt&gt;effectiveRoles&lt;/dt&gt;&lt;dd&gt;Filter users with roles, effective roles or direct roles (NO GROUPS)&lt;br/&gt;FALSE: Direct roles TRUE: effective roles&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false]. Default value is &lt;code&gt;false&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;&lt;b&gt;Logical grouping:&lt;/b&gt; filtering according first three fields (login, lastName, firstName)&lt;br&gt;is intrinsically processed by the API as logical &lt;i&gt;OR&lt;/i&gt;.  In opposite, filtering according to&lt;br/&gt;last three field (lockStatus)&lt;br/&gt;is processed intrinsically as logical &lt;i&gt;AND&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Example: &lt;samp&gt;login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2 &lt;/samp&gt;&lt;br/&gt;- filter by login contains searchString_1 or firstName contains searchString_2 and user are not locked&lt;/p&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;&lt;br/&gt;Multiple fields are supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;expireAt&lt;/dt&gt;&lt;dd&gt;Expiration date&lt;/dd&gt;&lt;dt&gt;lastLoginSuccessAt&lt;/dt&gt;&lt;dd&gt;Last successful logon date&lt;/dd&gt;&lt;dt&gt;login&lt;/dt&gt;&lt;dd&gt;Login name&lt;/dd&gt;&lt;dt&gt;firstName&lt;/dt&gt;&lt;dd&gt;First name&lt;/dd&gt;&lt;dt&gt;gender&lt;/dt&gt;&lt;dd&gt;Gender&lt;/dd&gt;&lt;dt&gt;lastName&lt;/dt&gt;&lt;dd&gt;Last name&lt;/dd&gt;&lt;dt&gt;lockStatus&lt;/dt&gt;&lt;dd&gt;User lock status&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;lastLoginSuccessAt:asc|firstName:desc&lt;/samp&gt;&lt;br/&gt;- sort by lastLoginSuccessAt ascending and by firstName descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerUsersTest() throws ApiException {
        String xSdsServiceToken = null;
        Long customerId = null;
        String xSdsDateFormat = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String sort = null;
        UserList response = api.getCustomerUsers(xSdsServiceToken, customerId, xSdsDateFormat, offset, limit, filter, sort);

        // TODO: test validations
    }
    
    /**
     * Get customers
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt;Receive a list of customers.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt;&amp;nbsp;This list returns a maximum of 1000 entries. Please use filters or searches to specify what you are looking for.&lt;br/&gt;Authentication with &lt;b&gt;X-Sds-Service-Token&lt;/b&gt; required.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;OPERATOR&amp;gt;:&amp;lt;VALUE&amp;gt;[:&amp;lt;VALUE&amp;gt;...]&lt;/dfn&gt;&lt;/p&gt;&lt;h5&gt;Fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;id&lt;/dt&gt;&lt;dd&gt;Customer ID filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;customerContractType&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;Customer contract type filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;demo|free|pay&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;providerCustomerId&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;Provider customer ID filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;companyName&lt;/dt&gt;&lt;dd&gt;Company name filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (Company name contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;quotaMax&lt;/dt&gt;&lt;dd&gt;Maximum quota filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Quota is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;quotaUsed&lt;/dt&gt;&lt;dd&gt;Used quota filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Quota is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;userMax&lt;/dt&gt;&lt;dd&gt;Maximum user filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (User maximum is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;userUsed&lt;/dt&gt;&lt;dd&gt;Used users filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Number of registered users is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Positiv Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;createdAt&lt;/dt&gt;&lt;dd&gt;Creation date filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Date is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Date&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;updatedAt&lt;/dt&gt;&lt;dd&gt;Update date filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Date is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Date&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;lastLoginAt&lt;/dt&gt;&lt;dd&gt;Last login filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Date is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Date&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;activationCode&lt;/dt&gt;&lt;dd&gt;Activation Code filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (Activation code contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;trialDaysLeft&lt;/dt&gt;&lt;dd&gt;Left trial days filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt; (Number of trial days is greater or equal | less or equal)&lt;br/&gt;VALUE: &lt;code&gt;Positiv Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;lockStatus&lt;/dt&gt;&lt;dd&gt;Lock status filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Integer (0 or 1)&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;userLogin&lt;/dt&gt;&lt;dd&gt;User login&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (Customer user login name equal value, multiple values not allowed)&lt;br/&gt; Search user all logins.E.g. sql, active_directory, radius.&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;.&lt;br/&gt;Multiple fields not supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;customerContractType&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;Customer contract type&lt;/dd&gt;&lt;dt&gt;providerCustomerId&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;Provider customer ID (pay customers)&lt;/dd&gt;&lt;dt&gt;companyName&lt;/dt&gt;&lt;dd&gt;Company name&lt;/dd&gt;&lt;dt&gt;quotaMax&lt;/dt&gt;&lt;dd&gt;Maximum quota&lt;/dd&gt;&lt;dt&gt;quotaUsed&lt;/dt&gt;&lt;dd&gt;Currently used quota&lt;/dd&gt;&lt;dt&gt;userMax&lt;/dt&gt;&lt;dd&gt;Maximum user number&lt;/dd&gt;&lt;dt&gt;userUsed&lt;/dt&gt;&lt;dd&gt;Number of currently active users&lt;/dd&gt;&lt;dt&gt;lockStatus&lt;/dt&gt;&lt;dd&gt;Lock status of customer&lt;/dd&gt;&lt;dt&gt;trialDaysLeft&lt;/dt&gt;&lt;dd&gt;Number of remaining trial days (demo customers)&lt;/dd&gt;&lt;dt&gt;createdAt&lt;/dt&gt;&lt;dd&gt;Creation date&lt;/dd&gt;&lt;dt&gt;updatedAt&lt;/dt&gt;&lt;dd&gt;Date of last update&lt;/dd&gt;&lt;dt&gt;lastLoginAt&lt;/dt&gt;&lt;dd&gt;Date of last login of any user of this customer&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;companyName:desc&lt;/samp&gt;&lt;br/&gt;&amp;rarr; sort by company name descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomersTest() throws ApiException {
        String xSdsServiceToken = null;
        String xSdsDateFormat = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String sort = null;
        CustomerList response = api.getCustomers(xSdsServiceToken, xSdsDateFormat, offset, limit, filter, sort);

        // TODO: test validations
    }
    
    /**
     * Create customer
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt;Create a new customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A new customer is created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Authentication with &lt;b&gt;X-Sds-Auth-Token&lt;/b&gt; required. If no company name is set, first name of the first DSA is used. Max quota has to be at least 1 GB (&#x3D; 1073741824).&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void newCustomerRequestTest() throws ApiException {
        String xSdsServiceToken = null;
        NewCustomerRequest body = null;
        String xSdsDateFormat = null;
        NewCustomerResponse response = api.newCustomerRequest(xSdsServiceToken, body, xSdsDateFormat);

        // TODO: test validations
    }
    
    /**
     * Update customer &lt;/dt&gt;
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt;Change selected attributes of a customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Existing customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Update of attributes.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Authentication with &lt;b&gt;X-Sds-Service-Token&lt;/b&gt; required.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerTest() throws ApiException {
        String xSdsServiceToken = null;
        Long customerId = null;
        UpdateCustomerRequest body = null;
        String xSdsDateFormat = null;
        UpdateCustomerResponse response = api.updateCustomer(xSdsServiceToken, customerId, body, xSdsDateFormat);

        // TODO: test validations
    }
    
}
