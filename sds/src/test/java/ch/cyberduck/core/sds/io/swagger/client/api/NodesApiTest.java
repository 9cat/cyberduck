/*
 * Secure Data Space API
 * Version 4.2.0.beta2 - built at: 2017-06-02 17:44:30, API server: https://duck.ssp-europe.eu/api/v4
 *
 * OpenAPI spec version: 4.2.0.beta2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.sds.io.swagger.client.api;

import ch.cyberduck.core.sds.io.swagger.client.ApiException;
import ch.cyberduck.core.sds.io.swagger.client.model.*;

import org.joda.time.LocalDate;
import org.junit.Ignore;
import org.junit.Test;

import java.io.File;
import java.util.List;

/**
 * API tests for NodesApi
 */
@Ignore
public class NodesApiTest {

    private final NodesApi api = new NodesApi();


    /**
     * Mark a node (room, folder or file) as favorite
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Marks a node (room, folder, file) as favorite.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs read permissions on that node.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A node gets marked as favorite.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFavoriteTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        String xSdsDateFormat = null;
        Node response = api.addFavorite(xSdsAuthToken, nodeId, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Cancel file upload
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Cancel an upload and destroy the Upload Channel.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; An Upload Channel has been created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; The Upload Channel is removed and all temporary uploaded data is purged.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; It is recommended to notify the API about cancelled uploads if possible.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelFileUploadTest() throws ApiException {
        String xSdsAuthToken = null;
        String uploadId = null;
        api.cancelFileUpload(xSdsAuthToken, uploadId);

        // TODO: test validations
    }

    /**
     * Handle user-room assignments per group that have not been accepted yet
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Handles a list of User - Room Assignments by Groups that have not been approved yet&lt;br/&gt;&lt;strong&gt;WAITING&lt;/strong&gt; or &lt;strong&gt;DENIED&lt;/strong&gt; Assignments can be &lt;strong&gt;ACCEPTED&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; User - Room Assignment is approved and the user gets access to the group.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Data Room Admins should regularly handle pending Assignments to provide access to rooms for other users.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePendingAssignmentsTest() throws ApiException {
        String xSdsAuthToken = null;
        PendingAssignmentsRequest body = null;
        api.changePendingAssignments(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Complete file upload
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Finishes an upload and closes the corresponding Upload Channel.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; An Upload Channel has been created and data has been transmitted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; The upload is finished and the temporary file is moved to the productive environment.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The provided file name might be changed in accordance with the resolution strategy:&lt;br/&gt;&#39;autorename&#39; changes the file name and adds a number to avoid conflicts.&lt;br/&gt;&#39;overwrite&#39; deletes any old file with the same file name.&lt;br/&gt;&#39;fail&#39; returns an error. In this case, another PUT request with a different file name may be sent.&lt;br/&gt;&lt;br/&gt;Please ensure that all chunks have been transferred correctly before finishing the upload.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeFileUploadTest() throws ApiException {
        String xSdsAuthToken = null;
        String uploadId = null;
        String xSdsDateFormat = null;
        CompleteUploadRequest body = null;
        Node response = api.completeFileUpload(xSdsAuthToken, uploadId, xSdsDateFormat, body);

        // TODO: test validations
    }

    /**
     * Config room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Updates a room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs to be Data Room Admin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Room&#39;s configuration is changed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configRoomTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        ConfigRoomRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.configRoom(xSdsAuthToken, roomId, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Copy file system nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt;Copies nodes (folder,file) to another parent.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Authenticated user with read permissions in the source parent and write permissions in the target parent node.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Nodes are copied to target parent.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Nodes must be in same source parent. Rooms cannot be copied.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        CopyNodesRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.copyNodes(xSdsAuthToken, nodeId, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Generate download token
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Create a download token to retrieve a file without X-Sds-Auth-Token Header.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User with read permission in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Download token is generated and returned.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The token is necessary to access /downloads ressources.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFileDownloadTokenTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        DownloadTokenGenerateResponse response = api.createFileDownloadToken(xSdsAuthToken, fileId);

        // TODO: test validations
    }

    /**
     * Create new file upload channel
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; This endpoint creates a new upload channel which is the first step in any file upload workflow.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has create permission in the parent container (room or folder).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A new upload channel for a file is created. Its ID and an upload token are returned.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The uploadID is used for uploads with X-Sds-Auth-Token header, the upload token can be used for uploads without authentication header.&lt;/p&gt;&lt;p&gt;Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Room/Folder/File name convention&lt;/h4&gt;&lt;h5&gt;Room/Folder/File names are limited to 150 characters.&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;Not allowed Room/Folder/File names&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;CON&#39;, &#39;PRN&#39;, &#39;AUX&#39;, &#39;NUL&#39;, &#39;COM1&#39;, &#39;COM2&#39;, &#39;COM3&#39;, &#39;COM4&#39;, &#39;COM5&#39;, &#39;COM6&#39;, &#39;COM7&#39;, &#39;COM8&#39;, &#39;COM9&#39;, &#39;LPT1&#39;, &#39;LPT2&#39;, &#39;LPT3&#39;, &#39;LPT4&#39;, &#39;LPT5&#39;, &#39;LPT6&#39;, &#39;LPT7&#39;, &#39;LPT8&#39;, &#39;LPT9&#39;,&#39;.&#39;,&#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;Not allowed characters in Room/Folder/File name&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;../&#39;, &#39;\\&#39;, &#39;&amp;lt;&#39;,&#39;&amp;gt;&#39;, &#39;:&#39;, &#39;\&quot;&#39;, &#39;|&#39;, &#39;?&#39;, &#39;*&#39;, &#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFileUploadTest() throws ApiException {
        String xSdsAuthToken = null;
        CreateFileUploadRequest body = null;
        CreateFileUploadResponse response = api.createFileUpload(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Create new folder
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Creates a new folder.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has create permission in current Data Room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A new folder is created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Folders cannot be created on top level (without parent element).&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Room/Folder/File name convention&lt;/h4&gt;&lt;h5&gt;Room/Folder/File names are limited to 150 characters.&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;Not allowed Room/Folder/File names&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;CON&#39;, &#39;PRN&#39;, &#39;AUX&#39;, &#39;NUL&#39;, &#39;COM1&#39;, &#39;COM2&#39;, &#39;COM3&#39;, &#39;COM4&#39;, &#39;COM5&#39;, &#39;COM6&#39;, &#39;COM7&#39;, &#39;COM8&#39;, &#39;COM9&#39;, &#39;LPT1&#39;, &#39;LPT2&#39;, &#39;LPT3&#39;, &#39;LPT4&#39;, &#39;LPT5&#39;, &#39;LPT6&#39;, &#39;LPT7&#39;, &#39;LPT8&#39;, &#39;LPT9&#39;,&#39;.&#39;,&#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;Not allowed characters in Room/Folder/File name&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;../&#39;, &#39;\\&#39;, &#39;&amp;lt;&#39;,&#39;&amp;gt;&#39;, &#39;:&#39;, &#39;\&quot;&#39;, &#39;|&#39;, &#39;?&#39;, &#39;*&#39;, &#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        String xSdsAuthToken = null;
        CreateFolderRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.createFolder(xSdsAuthToken, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Create new room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt; Creates a new Data Room at the provided parent node. Creation of top level rooms provided.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has create permissions in the parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A new room is created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt;&lt;br/&gt;Rooms may only have other rooms as parent.&lt;br/&gt;Rooms on top level do not have any parent.&lt;br/&gt;Rooms may have rooms as children on &lt;b&gt;n&lt;/b&gt; hierarchy levels.&lt;br/&gt;If permission inheritance is disabled, there must be at least one admin or admin group (with neither the group nor the user having an expiration date).&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoomTest() throws ApiException {
        String xSdsAuthToken = null;
        String xSdsDateFormat = null;
        CreateRoomRequest body = null;
        Node response = api.createRoom(xSdsAuthToken, xSdsDateFormat, body);

        // TODO: test validations
    }

    /**
     * Delete nodes from Recycle Bin
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Permanently remove a list of nodes from the recycle bin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has \&quot;Delete Recycle Bin\&quot; permissions in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; All provided nodes are removed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The removal of deleted nodes from the recycle bin is irreversible.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeletedNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        DeleteDeletedNodesRequest body = null;
        api.deleteDeletedNodes(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Delete file system node
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Delete node (room, folder, file).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Authenticated user with delete permissions on supplied nodes.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Node gets deleted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        api.deleteNode(xSdsAuthToken, nodeId);

        // TODO: test validations
    }

    /**
     * Delete file system nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Delete nodes (room, folder, file).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Authenticated user with delete permissions on supplied nodes.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Nodes are deleted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Nodes must be in same parent.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        DeleteNodesRequest body = null;
        api.deleteNodes(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Revoke group permissions from room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Batch function. Revoke groups from room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs to be Data Room Admin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Group&#39;s permissions are revoked.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoomGroupsBatchTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        RoomGroupsDeleteBatchRequest body = null;
        api.deleteRoomGroupsBatch(xSdsAuthToken, roomId, body);

        // TODO: test validations
    }

    /**
     * Revoke user permissions from room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Batch function. Revoke users from room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs to be Data Room Admin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; User&#39;s permissions are revoked.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoomUsersBatchTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        RoomUsersDeleteBatchRequest body = null;
        api.deleteRoomUsersBatch(xSdsAuthToken, roomId, body);

        // TODO: test validations
    }

    /**
     * Empty Recycle Bin
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt;Empty a recycle bin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has \&quot;Delete Recycle Bin \&quot; permissions in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; All files in the recycle bin are permanently removed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Actually removes the previously deleted files from the system. This action is irreversible.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emptyDeletedNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        api.emptyDeletedNodes(xSdsAuthToken, nodeId);

        // TODO: test validations
    }

    /**
     * Encrypt room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Activates the client-side encryption for a Data Room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs to be Data Room Admin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Encryption of Data Room is activated.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Only empty rooms at the top level may be encrypted. This endpoint may also be used to disable encryption of an empty room.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encryptRoomTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        EncryptRoomRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.encryptRoom(xSdsAuthToken, roomId, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Get Data Room Rescue file key
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Returns the fileKey for the Data Room Rescue Key of a certain file (if available).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User with read permission in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataRoomFileKeyTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        FileKey response = api.getDataRoomFileKey(xSdsAuthToken, fileId);

        // TODO: test validations
    }

    /**
     * Get DataSpace Rescue file key
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Returns the fileKey for the Data Space Rescue Key of a certain file (if available).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User with read permission in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataSpaceFileKeyTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        FileKey response = api.getDataSpaceFileKey(xSdsAuthToken, fileId);

        // TODO: test validations
    }

    /**
     * Download file
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Download a file.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User with read permission in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Range requests are supported (please cf. &lt;a href&#x3D;&#39;https://tools.ietf.org/html/rfc7233&#39; target&#x3D;&#39;_blank&#39;&gt;RFC 7233&lt;/a&gt; for details).&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileDataTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        String range = null;
        Boolean genericMimetype = null;
        Object response = api.getFileData(xSdsAuthToken, fileId, range, genericMimetype);

        // TODO: test validations
    }

    /**
     * Get file headers
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Retrieve the header of a file transmission. Please cf. &lt;a href&#x3D;&#39;https://tools.ietf.org/html/rfc7233&#39; target&#x3D;&#39;_blank&#39;&gt;RFC 7233&lt;/a&gt; for details.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User with read permission in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Equivalent of &lt;code&gt;HEAD /downloads/{token}&lt;/code&gt;, when a client can set &lt;em&gt;X-Sds-Auth-Token&lt;/em&gt; header.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileDataHeadTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        Boolean genericMimetype = null;
        api.getFileDataHead(xSdsAuthToken, fileId, genericMimetype);

        // TODO: test validations
    }

    /**
     * Get deleted node
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Get the meta data of one deleted node.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User can access parent room and has \&quot;Read Recycle Bin\&quot; permissions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFsDeletedNodeTest() throws ApiException {
        String xSdsAuthToken = null;
        Long deletedNodeId = null;
        String xSdsDateFormat = null;
        DeletedNode response = api.getFsDeletedNode(xSdsAuthToken, deletedNodeId, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Get deleted versions
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt;Retrieve all deleted versions of a node.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User can access parent room and has \&quot;Read Recycle Bin\&quot; permissions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The node is identified by three parameters: parent ID, name and type (file|folder).&lt;/p&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;.&lt;br/&gt;Multiple fields not supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;expireAt&lt;/dt&gt;&lt;dd&gt;Expiration date&lt;/dd&gt;&lt;dt&gt;accessedAt&lt;/dt&gt;&lt;dd&gt;Last access date&lt;/dd&gt;&lt;dt&gt;size&lt;/dt&gt;&lt;dd&gt;Node size&lt;/dd&gt;&lt;dt&gt;classification&lt;/dt&gt;&lt;dd&gt;Classification ID. File only&lt;/dd&gt;&lt;dt&gt;createdAt&lt;/dt&gt;&lt;dd&gt;Creation date&lt;/dd&gt;&lt;dt&gt;createdBy&lt;/dt&gt;&lt;dd&gt;Node created by user&lt;/dd&gt;&lt;dt&gt;updatedAt&lt;/dt&gt;&lt;dd&gt;Modification date &lt;/dd&gt;&lt;dt&gt;updatedBy&lt;/dt&gt;&lt;dd&gt;Node modified by user&lt;/dd&gt;&lt;dt&gt;deletedAt&lt;/dt&gt;&lt;dd&gt;Deleted date&lt;/dd&gt;&lt;dt&gt;deletedBy&lt;/dt&gt;&lt;dd&gt;Node deleted by user&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;expireAt:desc&lt;/samp&gt;&lt;br/&gt;&amp;rarr; sort by expireAt descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFsDeletedNodeVersionsTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        String type = null;
        String name = null;
        String xSdsDateFormat = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        DeletedNodeVersionsList response = api.getFsDeletedNodeVersions(xSdsAuthToken, nodeId, type, name, xSdsDateFormat, sort, offset, limit);

        // TODO: test validations
    }

    /**
     * Get deleted nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt;Retrieve a list of deleted nodes in a recycle bin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User can access parent room and has \&quot;Read Recycle Bin\&quot; permissions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Only room IDs are accepted as node ID since only rooms have recycle bins.&lt;/p&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;OPERATOR&amp;gt;:&amp;lt;VALUE&amp;gt;[:&amp;lt;VALUE&amp;gt;...]&lt;/dfn&gt;&lt;/p&gt;&lt;h5&gt;Fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;Node type filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values allowed)&lt;br/&gt;VALUE: &lt;code&gt;folder|file&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;Node name filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (Node name contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;parentPath&lt;/dt&gt;&lt;dd&gt;Parent path filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (Parent path contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;type:eq:file:folder|name:cn:searchString|parentPath:cn:searchString1&lt;/samp&gt;&lt;br/&gt;&amp;rarr; Get deleted nodes where type equals &#39;file&#39; or &#39;folder&#39; AND deleted node name contains &#39;searchString&#39; AND deleted node parent path contains &#39;searchString1&#39;.&lt;/p&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;.&lt;br/&gt;Multiple fields not supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;Node name&lt;/dd&gt;&lt;dt&gt;cntVersions&lt;/dt&gt;&lt;dd&gt;Number of deleted versions of this file&lt;/dd&gt;&lt;dt&gt;firstDeletedAt&lt;/dt&gt;&lt;dd&gt;First deleted version&lt;/dd&gt;&lt;dt&gt;lastDeletedAt&lt;/dt&gt;&lt;dd&gt;Last deleted version&lt;/dd&gt;&lt;dt&gt;parentPath&lt;/dt&gt;&lt;dd&gt;Parent path of deleted node&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;name:desc&lt;/samp&gt;&lt;br/&gt;&amp;rarr; sort by name descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFsDeletedNodesSummaryTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        String xSdsDateFormat = null;
        String filter = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        DeletedNodeSummaryList response = api.getFsDeletedNodesSummary(xSdsAuthToken, nodeId, xSdsDateFormat, filter, sort, offset, limit);

        // TODO: test validations
    }

    /**
     * Get node
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br /&gt;Get all file system node (Room, Folder, File)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has read permissions in auth parent room/subroom.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFsNodeTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        String xSdsDateFormat = null;
        Node response = api.getFsNode(xSdsAuthToken, nodeId, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Get file system nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt;Provides a hierarchical list of file system nodes (Rooms, Folders, Files) of a given parent that are accessible by the current user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Authenticated user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; EncryptionInfo is not provided.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;OPERATOR&amp;gt;:&amp;lt;VALUE&amp;gt;[:&amp;lt;VALUE&amp;gt;...]&lt;/dfn&gt;&lt;/p&gt;&lt;h5&gt;Fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;Node type filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values allowed)&lt;br/&gt;VALUE: &lt;code&gt;room|folder|file&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;perm&lt;/dt&gt;&lt;dd&gt;Permissions filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values allowed)&lt;br/&gt;VALUE: &lt;code&gt;manage|read|change|create|delete|manageDownloadShare|manageUploadShare|&lt;br/&gt;canReadRecycleBin|canRestoreRecycleBin|canDeleteRecycleBin&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;childPerm&lt;/dt&gt;&lt;dd&gt;The same as perm, but less restrictive (applied to child nodes only)&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values allowed)&lt;br/&gt;VALUE: &lt;code&gt;manage|read|change|create|delete|manageDownloadShare|manageUploadShare|&lt;br/&gt;canReadRecycleBin|canRestoreRecycleBin|canDeleteRecycleBin&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;Node name filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (name contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;encrypted&lt;/dt&gt;&lt;dd&gt;Node encryption status filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (Node is encrypted, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;true|false&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;branchVersion&lt;/dt&gt;&lt;dd&gt;Node branch version&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Version Number&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;type:eq:room:folder|perm:eq:read&lt;/samp&gt;&lt;br/&gt;&amp;rarr; Get nodes where type equals &#39;room&#39; or &#39;folder&#39; AND user has read permissions.&lt;/p&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;.&lt;br/&gt;Multiple fields not supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;Node name&lt;/dd&gt;&lt;dt&gt;createdBy&lt;/dt&gt;&lt;dd&gt;Creator user name&lt;/dd&gt;&lt;dt&gt;createdAt&lt;/dt&gt;&lt;dd&gt;Creation date&lt;/dd&gt;&lt;dt&gt;updatedBy&lt;/dt&gt;&lt;dd&gt;Modifier user name&lt;/dd&gt;&lt;dt&gt;updatedAt&lt;/dt&gt;&lt;dd&gt;Modification date&lt;/dd&gt;&lt;dt&gt;fileType&lt;/dt&gt;&lt;dd&gt;File type (extension)&lt;/dd&gt;&lt;dt&gt;classification&lt;/dt&gt;&lt;dd&gt;Classification&lt;/dd&gt;&lt;dt&gt;size&lt;/dt&gt;&lt;dd&gt;Node size&lt;/dd&gt;&lt;dt&gt;cntAdmins&lt;/dt&gt;&lt;dd&gt;&lt;b style&#x3D;&#39;color: red;&#39;&gt; DEPRECATED NO EFFECT&lt;/b&gt; For rooms only: Number of admins&lt;/dd&gt;&lt;dt&gt;cntUsers&lt;/dt&gt;&lt;dd&gt;&lt;b style&#x3D;&#39;color: red;&#39;&gt; DEPRECATED NO EFFECT&lt;/b&gt; For rooms only: Number of users&lt;/dd&gt;&lt;dt&gt;nodeCntChildren&lt;/dt&gt;&lt;dd&gt;For rooms/subrooms/folder only: Number of direct children (not recursive)&lt;/dd&gt;&lt;dt&gt;cntDeletedVersions&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;For files/folder only: Number of deleted versions of this file/folder (not recursive)&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;name:desc&lt;/samp&gt;&lt;br/&gt;&amp;rarr; sort by name descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFsNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        String xSdsDateFormat = null;
        Integer depthLevel = null;
        Long parentId = null;
        Boolean roomManager = null;
        String filter = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        NodeList response = api.getFsNodes(xSdsAuthToken, xSdsDateFormat, depthLevel, parentId, roomManager, filter, sort, offset, limit);

        // TODO: test validations
    }

    /**
     * Generate download token for zip download
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Create a download token to retrieve several files in one ZIP archive.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has read permission in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Download token is generated and returned.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The token is necessary to access /downloads resources.&lt;br/&gt;ZIP download is only available for files and folders.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesAsZipTest() throws ApiException {
        String xSdsAuthToken = null;
        ZipDownloadRequest body = null;
        DownloadTokenGenerateResponse response = api.getNodesAsZip(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Download files/folders as ZIP
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Download multiple files in a ZIP archive.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesAsZipDownloadTest() throws ApiException {
        String xSdsAuthToken = null;
        ZipDownloadRequest body = null;
        Object response = api.getNodesAsZipDownload(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Get user-room assignments per group that have not been accepted yet
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Requests a list of User - Room Assignments by Groups that have not been approved yet&lt;br/&gt;These can have the state &lt;strong&gt;WAITING&lt;/strong&gt; or &lt;strong&gt;DENIED&lt;/strong&gt;. &lt;strong&gt;ACCEPTED&lt;/strong&gt; Assignments are already removed from the list.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Data Room Admins should regularly request pending Assingments to provide access to rooms for other users.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;OPERATOR&amp;gt;:&amp;lt;VALUE&amp;gt;[:&amp;lt;VALUE&amp;gt;...]&lt;/dfn&gt;&lt;/p&gt;&lt;h5&gt;Fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;userId&lt;/dt&gt;&lt;dd&gt;User ID filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;groupId&lt;/dt&gt;&lt;dd&gt;Group ID filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;roomId&lt;/dt&gt;&lt;dd&gt;Room ID filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Positive Integer&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;state&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;Assignment state&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;WAITING|DENIED&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;.&lt;br/&gt;Multiple fields not supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;userId&lt;/dt&gt;&lt;dd&gt;User ID&lt;/dd&gt;&lt;dt&gt;groupId&lt;/dt&gt;&lt;dd&gt;Group ID&lt;/dd&gt;&lt;dt&gt;roomId&lt;/dt&gt;&lt;dd&gt;Room ID&lt;/dd&gt;&lt;dt&gt;state&lt;/dt&gt;&lt;dd&gt;State&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;userId:desc&lt;/samp&gt;&lt;br/&gt;&amp;rarr; sort by User ID descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPendingAssignmentsTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String sort = null;
        PendingAssignmentList response = api.getPendingAssignments(xSdsAuthToken, offset, limit, filter, sort);

        // TODO: test validations
    }

    /**
     * Get events of a room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt; &lt;br/&gt;Retrieve syslog (&#x3D; audit log) events related to a Room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Requires read permission on that room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Output may be limited to a certain number of entries. Please use filter criteria and paging.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoomActivitiesLogTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        String xSdsDateFormat = null;
        Integer offset = null;
        Integer limit = null;
        LocalDate dateStart = null;
        LocalDate dateEnd = null;
        List<Integer> type = null;
        List<Integer> userId = null;
        List<Integer> status = null;
        SyslogEventList response = api.getRoomActivitiesLog(xSdsAuthToken, roomId, xSdsDateFormat, offset, limit, dateStart, dateEnd, type, userId, status);

        // TODO: test validations
    }

    /**
     * Get room granted groups or/and groups that can be granted
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Retrieve a list of groups that are and/or can be granted to the room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Right \&quot;Groups Read\&quot; required.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;h5&gt;Filter fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;Group name&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;isGranted&lt;/dt&gt;&lt;dd&gt;Filter the groups that have access/no access to this room&lt;br/&gt;&lt;b&gt;Attention! This filter is only available for data room administrators.&lt;br/&gt; Other users can only look for users in their rooms, so this filter is TRUE and cannot be overridden.&lt;/b&gt;&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false|any]. Default value is &lt;code&gt;true&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;permissionsManage&lt;/dt&gt;&lt;dd&gt;Filter the groups that have/don&#39;t have manage right in this room&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false].&lt;/dd&gt;&lt;dt&gt;effectivePerm&lt;/dt&gt;&lt;dd&gt;Filter groups with permissions or effective permissions&lt;br/&gt;FALSE: Direct permissions TRUE: Effective permissions.&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false]. Default value is &lt;code&gt;true&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;groupId&lt;/dt&gt;&lt;dd&gt;Filter the groups by id&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: Positive Integer&lt;/dd&gt;&lt;/dl&gt;Example: &lt;samp&gt;isGranted:eq:false|name:cn:searchstring&lt;/samp&gt;&lt;br/&gt;- get all groups that have no rights to this room of and whose name is like searchstring&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoomGroupsTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        RoomGroupList response = api.getRoomGroups(xSdsAuthToken, roomId, offset, limit, filter);

        // TODO: test validations
    }

    /**
     * Get room granted users or/and users that can be granted
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Retrieve a list of groups that are and/or can be granted to the room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Right \&quot;Users Read\&quot; required.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;h5&gt;Filter fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;displayName&lt;/dt&gt;&lt;dd&gt;User display name (firstName, lastName, login)&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;isGranted&lt;/dt&gt;&lt;dd&gt;Filter the users that have access/no access to this room.&lt;br/&gt;&lt;b&gt;Attention! This filter is only available for data room administrators.&lt;br/&gt; Other users can only look for users in their rooms, so this filter is TRUE and cannot be overridden.&lt;/b&gt;&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false|any]. Default value is &lt;code&gt;true&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;permissionsManage&lt;/dt&gt;&lt;dd&gt;Filter the users that have/don&#39;t have manage right in this room&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false].&lt;/dd&gt;&lt;dt&gt;effectivePerm&lt;/dt&gt;&lt;dd&gt;Filter users with permissions, effective permissions or direct effective permissions&lt;br/&gt;FALSE: Direct permissions TRUE: Effective permissions. ANY: Direct effective.&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: [true|false|any]. Default value is &lt;code&gt;false&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;userId&lt;/dt&gt;&lt;dd&gt;Filter the users by id&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt; (multiple values not allowed)&lt;br/&gt;VALUE: Positive Integer&lt;/dd&gt;&lt;/dl&gt;Example: &lt;samp&gt;isGranted:eq:true|displayName:cn:searchstring|permissions_manage:eq:true&lt;/samp&gt;&lt;br/&gt;- get all users that have manage rights to this room of and whose name is like searchstring&lt;br/&gt;&lt;br/&gt;&lt;b&gt;The filters are connected by AND&lt;/b&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoomUsersTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        RoomUserList response = api.getRoomUsers(xSdsAuthToken, roomId, offset, limit, filter);

        // TODO: test validations
    }

    /**
     * Get user&#39;s file key
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Returns the FileKey for the current user (if available).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User with read, create or manage download share permissions in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The symmetric FileKey is encrypted with the user&#39;s PublicKey. FileKeys are generated with the Workflow \&quot;Generate FileKeys\&quot; that starts at &lt;b&gt;GET /nodes/missingFileKeys&lt;/b&gt;.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserFileKeyTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        FileKey response = api.getUserFileKey(xSdsAuthToken, fileId);

        // TODO: test validations
    }

    /**
     * Get files where the user has no filekey
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Requests a list of missing FileKeys that may be generated by the current user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has a KeyPair.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Clients should regularly request missing FileKeys to provide access to files for other users. The returned list is ordered by priority (Rescue Keys are returned first).&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void missingFileKeysTest() throws ApiException {
        String xSdsAuthToken = null;
        Integer offset = null;
        Integer limit = null;
        Long roomId = null;
        Long fileId = null;
        Long userId = null;
        MissingKeysResponse response = api.missingFileKeys(xSdsAuthToken, offset, limit, roomId, fileId, userId);

        // TODO: test validations
    }

    /**
     * Move file system nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt;Moves nodes (folder,file) to another parent.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Authenticated user with read and delete permissions in the source parent and write permissions in the target parent node.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Nodes are moved to target parent.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Nodes must be in same source parent. Rooms cannot be moved.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        MoveNodesRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.moveNodes(xSdsAuthToken, nodeId, body, xSdsDateFormat);

        // TODO: test validations
    }

    /**
     * Restore deleted nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Restore a list of deleted nodes.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has write permissions in parent room and \&quot;Restore Recycle Bin\&quot; permissions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; The selected files are moved from the recycle bin to the chosen productive container.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; If no parent ID is provided, the node is restored to its previous location.&lt;br/&gt;The default resolution strategy is &lt;code&gt;autorename&lt;/code&gt; that adds numbers to the file name until the conflict is solved. If an existing file is overwritten, it is moved to the recycle bin instead of the restored one.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        RestoreDeletedNodesRequest body = null;
        api.restoreNodes(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Get Data Room Rescue KeyPair
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Retrieve the Data Room Rescue Key Pair.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has read permission in that room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void roomRescueKeyTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        UserKeyPairContainer response = api.roomRescueKey(xSdsAuthToken, roomId);

        // TODO: test validations
    }

    /**
     * Search file system nodes
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt;Provides a flat list of file system nodes (Rooms, Folders, Files) of a given parent that are accessible by the current user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Authenticated user with read permission on parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt;&lt;br/&gt; A maximum of 500 results is returned. For more results please use paging (offset + limit).&lt;br/&gt; EncryptionInfo is not provided.&lt;br/&gt; Wildcard character is the asterisk (*).&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Filter&lt;/h4&gt;&lt;p&gt;Filter string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;OPERATOR&amp;gt;:&amp;lt;VALUE&amp;gt;[:&amp;lt;VALUE&amp;gt;...]&lt;/dfn&gt;&lt;/p&gt;&lt;h5&gt;Fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;Node type filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;room|folder|file&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;fileType&lt;/dt&gt;&lt;dd&gt;File type filter (file extension)&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (name contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;classification&lt;/dt&gt;&lt;dd&gt;File classification  filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;1|2|3|4&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;createdBy&lt;/dt&gt;&lt;dd&gt;Creation username filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (name contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;createdAt&lt;/dt&gt;&lt;dd&gt;Creation data filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Date (yyyy-HH-mm)&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;updatedBy&lt;/dt&gt;&lt;dd&gt;Last change username filter&lt;br/&gt;OPERATOR: &lt;code&gt;cn&lt;/code&gt; (name contains value, multiple values not allowed)&lt;br/&gt;VALUE: &lt;code&gt;Search string&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;updatedAt&lt;/dt&gt;&lt;dd&gt;Last change date filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Date (yyyy-HH-mm)&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;expireAt&lt;/dt&gt;&lt;dd&gt;Expire date filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Date (yyyy-HH-mm)&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;size&lt;/dt&gt;&lt;dd&gt;Size filter&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Size in bytes&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;isFavorite&lt;/dt&gt;&lt;dd&gt;Favorite filter&lt;br/&gt;OPERATOR: &lt;code&gt;eq&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;true|false&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;branchVersion&lt;/dt&gt;&lt;dd&gt;Node branch version&lt;br/&gt;OPERATOR: &lt;code&gt;ge|le&lt;/code&gt;&lt;br/&gt;VALUE: &lt;code&gt;Version Number&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;type:eq:file|createdAt:ge:2015-01-01&lt;/samp&gt;&lt;br/&gt;&amp;rarr; Get nodes where type equals file AND file was created at or after 2015-01-01&lt;/p&gt;&lt;h4&gt;Sort&lt;/h4&gt;&lt;p&gt;Sort string syntax: &lt;dfn&gt;&amp;lt;FIELD_NAME&amp;gt;:&amp;lt;ORDER&amp;gt;&lt;/dfn&gt;&lt;br/&gt;Order can be &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt;.&lt;br/&gt;Multiple fields not supported.&lt;/p&gt;&lt;h5&gt;Sort fields:&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;Node name&lt;/dd&gt;&lt;dt&gt;createdBy&lt;/dt&gt;&lt;dd&gt;Creator user name&lt;/dd&gt;&lt;dt&gt;createdAt&lt;/dt&gt;&lt;dd&gt;Creation date&lt;/dd&gt;&lt;dt&gt;updatedBy&lt;/dt&gt;&lt;dd&gt;Modifier user name&lt;/dd&gt;&lt;dt&gt;updatedAt&lt;/dt&gt;&lt;dd&gt;Modification date&lt;/dd&gt;&lt;dt&gt;fileType&lt;/dt&gt;&lt;dd&gt;File type (extension)&lt;/dd&gt;&lt;dt&gt;classification&lt;/dt&gt;&lt;dd&gt;Classification&lt;/dd&gt;&lt;dt&gt;size&lt;/dt&gt;&lt;dd&gt;Node size&lt;/dd&gt;&lt;dt&gt;cntAdmins&lt;/dt&gt;&lt;dd&gt;&lt;b style&#x3D;&#39;color: red;&#39;&gt; DEPRECATED NO EFFECT&lt;/b&gt; For rooms only: Number of admins&lt;/dd&gt;&lt;dt&gt;cntUsers&lt;/dt&gt;&lt;dd&gt;&lt;b style&#x3D;&#39;color: red;&#39;&gt; DEPRECATED NO EFFECT&lt;/b&gt; For rooms only: Number of users&lt;/dd&gt;&lt;dt&gt;nodeCntChildren&lt;/dt&gt;&lt;dd&gt;For rooms/subrooms/folder only: Number of direct children (not recursive)&lt;/dd&gt;&lt;dt&gt;cntDeletedVersions&lt;/dt&gt;&lt;dd&gt;For files/folder only: Number of deleted versions of this file/folder (not recursive)&lt;/dd&gt;&lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;Node Type (Room - Folder - File)&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Example: &lt;samp&gt;name:desc&lt;/samp&gt;&lt;br/&gt;&amp;rarr; sort by name descending&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchFsNodesTest() throws ApiException {
        String xSdsAuthToken = null;
        String searchString = null;
        String xSdsDateFormat = null;
        Integer depthLevel = null;
        Long parentId = null;
        String filter = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        NodeList response = api.searchFsNodes(xSdsAuthToken, searchString, xSdsDateFormat, depthLevel, parentId, filter, sort, offset, limit);

        // TODO: test validations
    }

    /**
     * Add or change room granted groups
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Batch function. All existing group permissions will be overwritten.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs to be Data Room Admin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Group&#39;s permissions are changed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRoomGroupsBatchTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        RoomGroupsAddBatchRequest body = null;
        api.setRoomGroupsBatch(xSdsAuthToken, roomId, body);

        // TODO: test validations
    }

    /**
     * Add or change room granted users
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Batch function. All existing user permissions will be overwritten.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs to be Data Room Admin.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; User&#39;s permissions are changed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRoomUsersBatchTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        RoomUsersAddBatchRequest body = null;
        api.setRoomUsersBatch(xSdsAuthToken, roomId, body);

        // TODO: test validations
    }

    /**
     * Set FileKeys for a list of users and files
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Sets symmetric FileKeys for several users and files.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has FileKeys for the files.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Stores new FileKeys for other users.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; Only users with copies of the FileKey (encrypted with their public keys) can access a certain file. This endpoint is used for the distribution of FileKeys amongst an authorized user base.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserFileKeysTest() throws ApiException {
        String xSdsAuthToken = null;
        UserFileKeySetBatchRequest body = null;
        api.setUserFileKeys(xSdsAuthToken, body);

        // TODO: test validations
    }

    /**
     * Unmark a node (room, folder or file) as favorite
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Unmarks a node (room, folder, file) as favorite.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User needs read permissions on that node.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A node gets unmarked as favorite.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmarkFavoriteTest() throws ApiException {
        String xSdsAuthToken = null;
        Long nodeId = null;
        api.unmarkFavorite(xSdsAuthToken, nodeId);

        // TODO: test validations
    }

    /**
     * Update file meta data
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Updates a file&#39;s meta data.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has change permissions in parent room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Meta data changed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Room/Folder/File name convention&lt;/h4&gt;&lt;h5&gt;Room/Folder/File names are limited to 150 characters.&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;Not allowed Room/Folder/File names&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;CON&#39;, &#39;PRN&#39;, &#39;AUX&#39;, &#39;NUL&#39;, &#39;COM1&#39;, &#39;COM2&#39;, &#39;COM3&#39;, &#39;COM4&#39;, &#39;COM5&#39;, &#39;COM6&#39;, &#39;COM7&#39;, &#39;COM8&#39;, &#39;COM9&#39;, &#39;LPT1&#39;, &#39;LPT2&#39;, &#39;LPT3&#39;, &#39;LPT4&#39;, &#39;LPT5&#39;, &#39;LPT6&#39;, &#39;LPT7&#39;, &#39;LPT8&#39;, &#39;LPT9&#39;,&#39;.&#39;,&#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;Not allowed characters in Room/Folder/File name&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;../&#39;, &#39;\\&#39;, &#39;&amp;lt;&#39;,&#39;&amp;gt;&#39;, &#39;:&#39;, &#39;\&quot;&#39;, &#39;|&#39;, &#39;?&#39;, &#39;*&#39;, &#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFileTest() throws ApiException {
        String xSdsAuthToken = null;
        Long fileId = null;
        UpdateFileRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.updateFile(xSdsAuthToken, fileId, body, xSdsDateFormat);

        // TODO: test validations
    }
    
    /**
     * Update folder
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Renames an existing folder.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User has change permissions in current Data Room.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; The folder is renamed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Room/Folder/File name convention&lt;/h4&gt;&lt;h5&gt;Room/Folder/File names are limited to 150 characters.&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;Not allowed Room/Folder/File names&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;CON&#39;, &#39;PRN&#39;, &#39;AUX&#39;, &#39;NUL&#39;, &#39;COM1&#39;, &#39;COM2&#39;, &#39;COM3&#39;, &#39;COM4&#39;, &#39;COM5&#39;, &#39;COM6&#39;, &#39;COM7&#39;, &#39;COM8&#39;, &#39;COM9&#39;, &#39;LPT1&#39;, &#39;LPT2&#39;, &#39;LPT3&#39;, &#39;LPT4&#39;, &#39;LPT5&#39;, &#39;LPT6&#39;, &#39;LPT7&#39;, &#39;LPT8&#39;, &#39;LPT9&#39;,&#39;.&#39;,&#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;Not allowed characters in Room/Folder/File name&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;../&#39;, &#39;\\&#39;, &#39;&amp;lt;&#39;,&#39;&amp;gt;&#39;, &#39;:&#39;, &#39;\&quot;&#39;, &#39;|&#39;, &#39;?&#39;, &#39;*&#39;, &#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        String xSdsAuthToken = null;
        Long folderId = null;
        UpdateFolderRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.updateFolder(xSdsAuthToken, folderId, body, xSdsDateFormat);

        // TODO: test validations
    }
    
    /**
     * Update room
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Update a room&#39;s meta data.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User is admin in superordinated level.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Room&#39;s meta data is changed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;h4&gt;Room/Folder/File name convention&lt;/h4&gt;&lt;h5&gt;Room/Folder/File names are limited to 150 characters.&lt;/h5&gt;&lt;dl&gt;&lt;dt&gt;Not allowed Room/Folder/File names&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;CON&#39;, &#39;PRN&#39;, &#39;AUX&#39;, &#39;NUL&#39;, &#39;COM1&#39;, &#39;COM2&#39;, &#39;COM3&#39;, &#39;COM4&#39;, &#39;COM5&#39;, &#39;COM6&#39;, &#39;COM7&#39;, &#39;COM8&#39;, &#39;COM9&#39;, &#39;LPT1&#39;, &#39;LPT2&#39;, &#39;LPT3&#39;, &#39;LPT4&#39;, &#39;LPT5&#39;, &#39;LPT6&#39;, &#39;LPT7&#39;, &#39;LPT8&#39;, &#39;LPT9&#39;,&#39;.&#39;,&#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;Not allowed characters in Room/Folder/File name&lt;/dt&gt;&lt;dd&gt;&lt;br/&gt;&lt;code&gt;&#39;../&#39;, &#39;\\&#39;, &#39;&amp;lt;&#39;,&#39;&amp;gt;&#39;, &#39;:&#39;, &#39;\&quot;&#39;, &#39;|&#39;, &#39;?&#39;, &#39;*&#39;, &#39;/&#39;&lt;/code&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoomTest() throws ApiException {
        String xSdsAuthToken = null;
        Long roomId = null;
        UpdateRoomRequest body = null;
        String xSdsDateFormat = null;
        Node response = api.updateRoom(xSdsAuthToken, roomId, body, xSdsDateFormat);

        // TODO: test validations
    }
    
    /**
     * Upload file
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt; Uploads a file or parts of it in an active Upload Channel.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; An Upload Channel has been created.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; A file or parts of it are uploaded to a temporary location.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; This endpoints supports chunked upload. Please cf. &lt;a href&#x3D;&#39;https://tools.ietf.org/html/rfc7233&#39; target&#x3D;&#39;_blank&#39;&gt;RFC 7233&lt;/a&gt; for further information.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String xSdsAuthToken = null;
        String uploadId = null;
        File file = null;
        String contentRange = null;
        ChunkUploadResponse response = api.uploadFile(xSdsAuthToken, uploadId, file, contentRange);

        // TODO: test validations
    }
    
}
