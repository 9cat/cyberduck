/*
 * Secure Data Space API
 * Version 4.1.2 - built at: 2017-03-02 18:50:25, API server: https://sds.ssp-europe.eu/api/v4
 *
 * OpenAPI spec version: 4.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.sds.io.swagger.client.api;

import ch.cyberduck.core.sds.io.swagger.client.ApiException;
import ch.cyberduck.core.sds.io.swagger.client.model.AuthInitResources;
import ch.cyberduck.core.sds.io.swagger.client.model.LoginRequest;
import ch.cyberduck.core.sds.io.swagger.client.model.LoginResponse;
import ch.cyberduck.core.sds.io.swagger.client.model.ResetPasswordRequest;
import ch.cyberduck.core.sds.io.swagger.client.model.ResetPasswordTokenValidateResponse;
import ch.cyberduck.core.sds.io.swagger.client.model.ResetPasswordWithTokenRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * Get authentication resources
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt;Provides information about authentication options.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The server identifies the relevant customer by the passed HTTP header \&quot;Origin\&quot;. Use this call to customize the log-on form.&lt;br/&gt;&lt;u&gt;Important:&lt;/u&gt; The default language for the system is always provided as topmost entry as well as the default authentication method.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Currently supported languages (with ISO 639-1 code):&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;German (de)&lt;/li&gt;&lt;li&gt;English (en)&lt;/li&gt;&lt;li&gt;Spanish (es)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthInitResourcesTest() throws ApiException {
        AuthInitResources response = api.getAuthInitResources();

        // TODO: test validations
    }
    
    /**
     * Authenticate user
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br /&gt;Authenticates user and provides an authentication token that is required for most operations.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Existing user that is not locked.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; User is logged in.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; The provided token is valid for &lt;em&gt;two hours&lt;/em&gt;, every usage resets this period to two full hours again. Logging off invalidates the token.&lt;br/&gt;&lt;u&gt;Important:&lt;/u&gt; If auth type \&quot;radius\&quot; is used, a token (request parameter) may be set, otherwise this parameter is ignored. If the token is set, &lt;b&gt;password&lt;/b&gt; is mandatory for this auth type.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Currently supported languages (with ISO 639-1 code):&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;German (de)&lt;/li&gt;&lt;li&gt;English (en)&lt;/li&gt;&lt;li&gt;Spanish (es)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        LoginRequest body = null;
        LoginResponse response = api.login(body);

        // TODO: test validations
    }
    
    /**
     * Request password reset
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt;Request an email with a request token for a certain user to reset his/her password.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; Registered user account.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Provided user receives email with reset token.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;&lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Currently supported languages (with ISO 639-1 code):&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;German (de)&lt;/li&gt;&lt;li&gt;English (en)&lt;/li&gt;&lt;li&gt;Spanish (es)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetTest() throws ApiException {
        ResetPasswordRequest body = null;
        api.requestPasswordReset(body);

        // TODO: test validations
    }
    
    /**
     * Reset password
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt;Resets a user&#39;s password to a new value.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User received a password reset token.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; Newly transmitted password is set.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        String token = null;
        ResetPasswordWithTokenRequest body = null;
        api.resetPassword(token, body);

        // TODO: test validations
    }
    
    /**
     * Provide info for password reset
     *
     * &lt;div class&#x3D;\&quot;sds\&quot;&gt;&lt;p&gt;&lt;strong&gt;Functional Description:&lt;/strong&gt;&lt;br/&gt;Request all information for a password change dialogue (e.g. real name of user).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; User received a password reset token.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Effects:&lt;/strong&gt; None.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Further Information:&lt;/strong&gt; None.&lt;/p&gt;&lt;/div&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateResetPasswordTokenTest() throws ApiException {
        String token = null;
        ResetPasswordTokenValidateResponse response = api.validateResetPasswordToken(token);

        // TODO: test validations
    }
    
}
