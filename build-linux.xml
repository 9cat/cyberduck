<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	Simple Ant (http://jakarta.apache.org/ant) build script for Cyberduck
 *
 *	$Revision$
 *	$Date$
 *
 *  Copyright (c) 2005-2012 David Kocher. All rights reserved.
 *  http://cyberduck.io/
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Bug fixes, suggestions and comments should be sent to:
 *	dkocher@cyberduck.io
 -->
<project name="Cyberduck for Linux" basedir="."
         xmlns:fx="javafx:com.sun.javafx.tools.ant">

    <import file="build.xml"/>

    <property name="cli.bundles" value="all"/>
    <property name="app.icon" value="cyberduck-application.png"/>
    <property name="jvm.runtime.bundle.home" value="${java.home}"/>

    <target name="_build"/>

    <target name="findbundle">
        <available
                file="${build.bundles}/duck-${cyberduck.version.major}.${cyberduck.version.minor}.${svn.revision}${bundle.type}"
                property="bundle.exists"/>
    </target>

    <target name="_cli">
        <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
                 uri="javafx:com.sun.javafx.tools.ant">
            <classpath path="${java.home}/../lib/ant-javafx.jar"/>
        </taskdef>

        <mkdir dir="${build.deploy}"/>
        <fx:deploy nativeBundles="${cli.bundles}"
                   outdir="${build.deploy}"
                   outfile="${app.name}-${cyberduck.version.major}.${cyberduck.version.minor}"
                   offlineAllowed="true"
                   verbose="true">
            <fx:platform basedir="${java.home}">
                <fx:jvmarg value="-Djna.nounpack=true"/>
                <fx:jvmarg value="-Djna.noclasspath=true"/>
                <fx:jvmarg value="-Djava.awt.headless=true"/>
                <fx:jvmarg value="-Dsun.jnu.encoding=utf-8"/>
                <fx:jvmarg value="-Dfile.encoding=utf-8"/>
            </fx:platform>
            <fx:application
                    name="duck" version="${cyberduck.version.major}.${cyberduck.version.minor}.${svn.revision}"
                    mainClass="ch.cyberduck.cli.Terminal"/>
            <fx:info title="${app.name}" license="GPL" copyright="${copyright}"
                     description="Cyberduck"
                     vendor="cyberduck.io">
                <fx:icon href="${app.icon}"/>
            </fx:info>
            <fx:resources>
                <fx:fileset dir="${build}" type="jar">
                    <include name="*.jar"/>
                </fx:fileset>
                <fx:fileset dir="${lib}" type="jar">
                    <include name="*.jar"/>
                </fx:fileset>
                <fx:fileset dir="${lib}" type="data">
                    <include name="*.dylib"/>
                    <include name="*.so"/>
                </fx:fileset>
                <fx:fileset dir="${build.deploy}" type="data">
                    <include name="*.dylib"/>
                </fx:fileset>
                <fx:fileset dir="." type="icon">
                    <include name="*.ico"/>
                </fx:fileset>
                <fx:fileset type="license" file="LICENSE.txt"/>
            </fx:resources>
            <fx:preferences install="false"/>
        </fx:deploy>
    </target>

    <target name="_upload" depends="findbundle" if="bundle.exists">
        <checksum
                file="${build.bundles}/duck-${cyberduck.version.major}.${cyberduck.version.minor}.${svn.revision}${bundle.type}"
                algorithm="md5"/>
        <scp file="${build.bundles}/duck-${cyberduck.version.major}.${cyberduck.version.minor}.${svn.revision}${bundle.type}.md5"
             todir="${uri}"
             trust="true"
             keyfile="${user.home}/.ssh/update.cyberduck.io-rsa"
             passphrase="">
        </scp>
        <scp file="${build.bundles}/duck-${cyberduck.version.major}.${cyberduck.version.minor}.${svn.revision}${bundle.type}"
             todir="${uri}"
             trust="true"
             keyfile="${user.home}/.ssh/update.cyberduck.io-rsa"
             passphrase="">
        </scp>
    </target>
</project>
