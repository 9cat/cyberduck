<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	Simple Ant (http://jakarta.apache.org/ant) build script for Cyberduck
 *
 *	$Revision$
 *	$Date$
 *
 *  Copyright (c) 2005-2012 David Kocher. All rights reserved.
 *  http://cyberduck.io/
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Bug fixes, suggestions and comments should be sent to:
 *	dkocher@cyberduck.io
 -->
<project name="Cyberduck for Linux" basedir="."
         xmlns:fx="javafx:com.sun.javafx.tools.ant">

    <import file="build.xml"/>

    <property name="cli.bundles" value="all"/>
    <property name="app.icon" value="cyberduck-application.png"/>
    <property name="jvm.runtime.bundle.home" value="${java.home}"/>
    <property name="rpm.spec" value="${build.bundles}/package/linux"/>

    <target name="_build"/>

    <target name="_fxdeploy">
        <fx:deploy nativeBundles="${cli.bundles}"
                   outdir="${build.deploy}"
                   outfile="${app.name}-${version}"
                   offlineAllowed="true"
                   verbose="true">
            <fx:platform basedir="${java.home}">
                <fx:jvmarg value="-Djna.nounpack=true"/>
                <fx:jvmarg value="-Djna.noclasspath=true"/>
                <fx:jvmarg value="-Djava.awt.headless=true"/>
                <fx:jvmarg value="-Dsun.jnu.encoding=utf-8"/>
                <fx:jvmarg value="-Dfile.encoding=utf-8"/>
            </fx:platform>
            <fx:application
                    name="duck" version="${version}.${revision}"
                    mainClass="ch.cyberduck.cli.Terminal"/>
            <fx:info title="${app.name}" license="GPL" copyright="${copyright}"
                     description="Cyberduck"
                     vendor="cyberduck.io">
                <fx:icon href="${app.icon}"/>
            </fx:info>
            <fx:resources>
                <fx:fileset dir="${build}" type="jar">
                    <include name="*.jar"/>
                </fx:fileset>
                <fx:fileset dir="${lib}" type="jar">
                    <include name="*.jar"/>
                </fx:fileset>
                <fx:fileset dir="${lib}" type="data">
                    <include name="*.${platform.arch}.so"/>
                </fx:fileset>
                <fx:fileset dir="." type="icon">
                    <include name="*.ico"/>
                </fx:fileset>
                <fx:fileset type="license" file="LICENSE.txt"/>
                <fx:fileset dir="${home}/profiles" type="data">
                    <include name="Rackspace US.cyberduckprofile"/>
                </fx:fileset>
                <fx:fileset dir="${home}/bookmarks" type="data"/>
            </fx:resources>
            <fx:preferences install="true"/>
        </fx:deploy>
    </target>

    <target name="_cli">
        <mkdir dir="${rpm.spec}"/>
        <copy file="${setup}/duck.spec" todir="${rpm.spec}"/>
        <replace file="${rpm.spec}/duck.spec" summary="true" encoding="UTF-8">
            <replacefilter token="${VERSION}" value="${version}"/>
        </replace>
        <mkdir dir="${build.deploy}"/>

        <path id="javafx.classpath">
            <pathelement path="${java.home}/../lib/ant-javafx.jar"/>
            <pathelement path="${build.bundles}"/>
        </path>
        <javac fork="true"
               includeantruntime="false"
               debug="${debug}"
               encoding="utf-8"
               srcdir="${source}"
               target="${build.compile.target}"
               source="${build.compile.target}"
               deprecation="on"
               listfiles="on"
               extdirs=""
               destdir="${build.classes}">
            <include name="com/sun/javafx/**"/>
            <classpath refid="javafx.classpath"/>
        </javac>

        <if>
            <equals arg1="${javafx.arch}" arg2="32bit"/>
            <then>
                <path id="javafx.classpath.32bit">
                    <!-- includes our 32bit rpmbuilder -->
                    <pathelement path="${build.classes}"/>
                    <path refid="javafx.classpath"/>
                </path>
                <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
                         uri="javafx:com.sun.javafx.tools.ant">
                    <classpath refid="javafx.classpath.32bit"/>
                </taskdef>
            </then>
            <else>
                <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
                         uri="javafx:com.sun.javafx.tools.ant">
                    <classpath refid="javafx.classpath"/>
                </taskdef>
            </else>
        </if>
        <antcall target="_fxdeploy"/>
    </target>
</project>
